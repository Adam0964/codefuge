
---
books:
  columns:
  - id
  - title
  - author
  - pubDate
  - cover
  - description
  - created_at
  - updated_at
  records: 
  - - '92'
    - Agile Web Development With Rails
    - Dave Thomas and David Heinemeier Hansson
    - '2011'
    - agile.jpg
    - 
    - '2013-09-27 03:01:35.350418'
    - '2013-09-27 03:01:35.350418'
  - - '93'
    - Rails 3 in Action
    - Ryan Bigg and Yehuda Katz
    - '2011'
    - rails_3_in_action.jpg
    - 
    - '2013-09-27 03:01:35.701381'
    - '2013-09-27 03:01:35.701381'
  - - '94'
    - Rails Antipatterns
    - Tammer Saleh and Chad Pytel
    - '2010'
    - rails_antipatterns.jpg
    - 
    - '2013-09-27 03:01:35.707874'
    - '2013-09-27 03:01:35.707874'
  - - '95'
    - Rails Recipes
    - Chad Fowler
    - '2012'
    - rails_recipes_3_edition.jpg
    - 
    - '2013-09-27 03:01:35.713836'
    - '2013-09-27 03:01:35.713836'
  - - '96'
    - Rails 3 Way
    - Obie Fernandez
    - '2010'
    - rails3way.jpg
    - 
    - '2013-09-27 03:01:35.719749'
    - '2013-09-27 03:01:35.719749'
  - - '97'
    - Objects On Rails
    - Avdi Grimm
    - '2012'
    - railsobj.jpg
    - 
    - '2013-09-27 03:01:35.726192'
    - '2013-09-27 03:01:35.726192'
  - - '98'
    - Ruby on Rails 3 Tutorial
    - Michael Hart
    - '2012'
    - ruby_on_rails_tutorial_2nd_edition.jpg
    - 
    - '2013-09-27 03:01:35.732228'
    - '2013-09-27 03:01:35.732228'
  - - '99'
    - Programming Ruby
    - Thomas, Chad Fowler, Andy Hunt
    - '2004'
    - ruby.jpg
    - 
    - '2013-09-27 03:01:35.737909'
    - '2013-09-27 03:01:35.737909'
  - - '100'
    - The Rails View
    - John Athayde, Bruce Williams
    - '2012'
    - rails_view.jpg
    - 
    - '2013-09-27 03:01:35.744454'
    - '2013-09-27 03:01:35.744454'
  - - '101'
    - Learning Rails 3
    - Simon St. Laurent, et al
    - '2012'
    - learning_rails_3.jpg
    - 
    - '2013-09-27 03:01:35.750256'
    - '2013-09-27 03:01:35.750256'
  - - '102'
    - Learning Ruby
    - Michael James Fitzgerald
    - '2007'
    - learning_ruby.jpg
    - 
    - '2013-09-27 03:01:35.756477'
    - '2013-09-27 03:01:35.756477'
  - - '103'
    - Crafting Rails Applications
    - Jose Valim
    - '2011'
    - crafting_rails_applications.jpg
    - 
    - '2013-09-27 03:01:35.763303'
    - '2013-09-27 03:01:35.763303'
  - - '104'
    - Crafting Rails 4 Applications
    - Jose Valim
    - '2013'
    - crafting_rails4.jpg
    - 
    - '2013-09-27 03:01:35.769285'
    - '2013-09-27 03:01:35.769285'
  - - '105'
    - Advanced Rails Recipes
    - Mike Clarck
    - '2008'
    - advanced_rails.jpg
    - 
    - '2013-09-27 03:01:35.822412'
    - '2013-09-27 03:01:35.822412'
  - - '106'
    - Rest In Practice
    - Jim Webber, Savas Parastatidis, et al
    - '2010'
    - rest_in_practice.jpg
    - 
    - '2013-09-27 03:01:35.828553'
    - '2013-09-27 03:01:35.828553'
  - - '107'
    - Restful Web Serices
    - Leonard Richardson, Sam Ruby
    - '2007'
    - restful_web_services.jpg
    - 
    - '2013-09-27 03:01:35.834651'
    - '2013-09-27 03:01:35.834651'
  - - '108'
    - The Rspec Book
    - David Chelimsky, Dave Astels, et al
    - '2010'
    - rspec.jpg
    - 
    - '2013-09-27 03:01:35.841432'
    - '2013-09-27 03:01:35.841432'
  - - '109'
    - The Cucumber Book
    - Matt Wynne, Aslak Hellesoy
    - '2012'
    - cucumber_book.jpg
    - 
    - '2013-09-27 03:01:35.847618'
    - '2013-09-27 03:01:35.847618'
  - - '110'
    - Ruby, MongoDB Web Development
    - Gautam Rege
    - '2012'
    - ruby_and_mongodb_web_development.jpg
    - 
    - '2013-09-27 03:01:35.854689'
    - '2013-09-27 03:01:35.854689'
  - - '111'
    - Service Oriented Design With RoR
    - Paul Dix
    - '2010'
    - service_oriented_design.jpg
    - 
    - '2013-09-27 03:01:35.861064'
    - '2013-09-27 03:01:35.861064'
  - - '112'
    - Smashing CSS
    - Eric Meyer
    - '2010'
    - smashing_css.jpg
    - 
    - '2013-09-27 03:01:35.867788'
    - '2013-09-27 03:01:35.867788'
  - - '113'
    - The Book of CSS 3
    - Peter Gasston
    - '2010'
    - the_book_of_css3.jpg
    - 
    - '2013-09-27 03:01:35.881002'
    - '2013-09-27 03:01:35.881002'
  - - '114'
    - Twitter Bootstrap Web Development
    - David Chocran
    - '2012'
    - twitter_bootstrap_web_development_how-to.jpg
    - 
    - '2013-09-27 03:01:35.886979'
    - '2013-09-27 03:01:35.886979'
  - - '115'
    - Typography Best Practices
    - Smashing Magazine
    - '2013'
    - typography.jpg
    - 
    - '2013-09-27 03:01:35.893225'
    - '2013-09-27 03:01:35.893225'
  - - '116'
    - Values, Units and Colors
    - Eric eyer
    - '2012'
    - values_units_and_colors.jpg
    - 
    - '2013-09-27 03:01:35.899454'
    - '2013-09-27 03:01:35.899454'
  - - '117'
    - Web Design For Developers
    - Brian P. Hogan
    - '2010'
    - web_design_for_developers.jpg
    - 
    - '2013-09-27 03:01:35.906523'
    - '2013-09-27 03:01:35.906523'
  - - '118'
    - Building Web Apps With SVG
    - David Dailey, Jon Frost, et al
    - '2012'
    - building_web_applications_with_svg.jpg
    - 
    - '2013-09-27 03:01:35.913075'
    - '2013-09-27 03:01:35.913075'
  - - '119'
    - CSS and Documents
    - Eric Meyer
    - '2012'
    - css_and_documents.jpg
    - 
    - '2013-09-27 03:01:35.918975'
    - '2013-09-27 03:01:35.918975'
  - - '120'
    - Deploying Rails
    - Tom Copeland
    - '2012'
    - deploying_rails.jpg
    - 
    - '2013-09-27 03:01:35.925052'
    - '2013-09-27 03:01:35.925052'
  - - '121'
    - Responsive Web Design
    - Nathan Marcotte
    - '2012'
    - responsive_design1.jpg
    - 
    - '2013-09-27 03:01:35.931047'
    - '2013-09-27 03:01:35.931047'
  - - '122'
    - CSS For Web Designers
    - Dan Cederholm
    - '2010'
    - css_for_web_designers.jpg
    - 
    - '2013-09-27 03:01:35.936815'
    - '2013-09-27 03:01:35.936815'
  - - '123'
    - Elastic Beanstalk
    - Jurg van Vliet, Flavia Paganelli, et al
    - '2011'
    - elastic_beanstalk.jpg
    - 
    - '2013-09-27 03:01:35.943424'
    - '2013-09-27 03:01:35.943424'
  - - '124'
    - Eloquent Ruby
    - Russ Olsen
    - '2011'
    - eloquent_ruby.jpg
    - 
    - '2013-09-27 03:01:35.950777'
    - '2013-09-27 03:01:35.950777'
  - - '125'
    - ember.js App Development How-To
    - Marc Bodmer
    - '2013'
    - ember_application_how_to.jpg
    - 
    - '2013-09-27 03:01:35.95697'
    - '2013-09-27 03:01:35.95697'
  - - '126'
    - ember.js In Action
    - Joachim Haagen Skeie
    - '2013'
    - ember_in_action.jpg
    - 
    - '2013-09-27 03:01:35.976553'
    - '2013-09-27 03:01:35.976553'
  - - '127'
    - Designing For Emotion
    - Aaron Walter
    - '2011'
    - design_for_emotion.jpg
    - 
    - '2013-09-27 03:01:35.982614'
    - '2013-09-27 03:01:35.982614'
  - - '128'
    - Distributed VC With Git
    - Lars Vogel
    - '2013'
    - distributed_git.png
    - 
    - '2013-09-27 03:01:35.987923'
    - '2013-09-27 03:01:35.987923'
  - - '129'
    - Mobile First
    - Luke Wroblewski
    - '2012'
    - mobile_first.jpg
    - 
    - '2013-09-27 03:01:35.99313'
    - '2013-09-27 03:01:35.99313'
  - - '130'
    - 'Git: VC For Everyone'
    - Ravishankar Somasundaram
    - '2013'
    - git_for_everyone.jpg
    - 
    - '2013-09-27 03:01:35.997961'
    - '2013-09-27 03:01:35.997961'
  - - '131'
    - 'HTML and CSS: The Good Parts'
    - Ben Henrick
    - '2010'
    - html__css_the_good_parts.jpg
    - 
    - '2013-09-27 03:01:36.002931'
    - '2013-09-27 03:01:36.002931'
  - - '132'
    - HTML5 For Web Designers
    - Jeremy Keith
    - '2012'
    - html5_for_web_designers.jpg
    - 
    - '2013-09-27 03:01:36.007982'
    - '2013-09-27 03:01:36.007982'
  - - '133'
    - Engineering Software As A Service
    - Armando Fox & David Patterson
    - '2012'
    - saas.jpg
    - 
    - '2013-09-27 03:01:36.012507'
    - '2013-09-27 03:01:36.012507'
  - - '134'
    - HTML Boilerplate
    - Dyvia Manian
    - '2012'
    - html5_boilerplate_web_development.jpg
    - 
    - '2013-09-27 03:01:36.017347'
    - '2013-09-27 03:01:36.017347'
  - - '135'
    - Interactive Data Visualization
    - Scott Murray
    - '2013'
    - interactive_data_visualization_for_the_web.jpg
    - 
    - '2013-09-27 03:01:36.02219'
    - '2013-09-27 03:01:36.02219'
  - - '136'
    - Smashing jQuery
    - Jake Rutter
    - '2011'
    - jquery.jpg
    - 
    - '2013-09-27 03:01:36.028018'
    - '2013-09-27 03:01:36.028018'
  - - '137'
    - JRuby Cookbook
    - Justin Edelson
    - '2008'
    - jruby_cookbook.jpg
    - 
    - '2013-09-27 03:01:36.032843'
    - '2013-09-27 03:01:36.032843'
  - - '138'
    - Lucene In Action
    - Michael McCandless, Erik Hatcher, et al
    - '2010'
    - lucene_in_action_2nd_edition.jpg
    - 
    - '2013-09-27 03:01:36.037558'
    - '2013-09-27 03:01:36.037558'
  - - '139'
    - Mobile Design Pattern Gallery
    - Theresa Neil
    - '2012'
    - mobile_design_pattern_gallery.jpg
    - 
    - '2013-09-27 03:01:36.042338'
    - '2013-09-27 03:01:36.042338'
  - - '140'
    - Multitenency With Rails
    - Ryan Bigg
    - '2013'
    - multitenancy_with_rails.jpg
    - 
    - '2013-09-27 03:01:36.047076'
    - '2013-09-27 03:01:36.047076'
  - - '141'
    - Pro CSS For High Traffic Websites
    - Anthony kennedy
    - '2011'
    - pro_css_for_high_traffic_websites.jpg
    - 
    - '2013-09-27 03:01:36.051528'
    - '2013-09-27 03:01:36.051528'
  - - '142'
    - Pro CSS Animation
    - Dudley Sorey
    - '2012'
    - pro_css3_animation.jpg
    - 
    - '2013-09-27 03:01:36.056295'
    - '2013-09-27 03:01:36.056295'
  - - '143'
    - Professional Design V I
    - Smashing Magazine
    - '2010'
    - professional_design1.jpg
    - 
    - '2013-09-27 03:01:36.061402'
    - '2013-09-27 03:01:36.061402'
  - - '144'
    - Professional Design V II
    - Smashing Magazine
    - '2011'
    - professional_design2.jpg
    - 
    - '2013-09-27 03:01:36.066253'
    - '2013-09-27 03:01:36.066253'
  - - '145'
    - Programming Amazon EC2
    - Jurg van Vliet, Flavia Paganelli
    - '2011'
    - programming_amazon_ec2.jpg
    - 
    - '2013-09-27 03:01:36.071492'
    - '2013-09-27 03:01:36.071492'
  - - '146'
    - Programming The Mobile Web
    - Maximiliano Firtman
    - '2010'
    - programming_the_mobile_web.jpg
    - 
    - '2013-09-27 03:01:36.076663'
    - '2013-09-27 03:01:36.076663'
  - - '147'
    - Designing With Progressive Enhancement
    - Todd Parker, Scott Jehl, et al
    - '2010'
    - design_with_progressive_enhancement.jpg
    - 
    - '2013-09-27 03:01:36.082945'
    - '2013-09-27 03:01:36.082945'
  - - '148'
    - Prototype AND Scriptaculous
    - Andrew Dupont
    - '2008'
    - prototype_and_scriptaculous.jpg
    - 
    - '2013-09-27 03:01:36.08838'
    - '2013-09-27 03:01:36.08838'
  - - '149'
    - Rails 4.0 Guide
    - Stefan Wintermeyer
    - '2013'
    - rails4.jpg
    - 
    - '2013-09-27 03:01:36.09335'
    - '2013-09-27 03:01:36.09335'
  - - '150'
    - Content Strategy For Mobile
    - Karen McGrane
    - '2012'
    - content_strategy_for_mobile.jpg
    - 
    - '2013-09-27 03:01:36.097913'
    - '2013-09-27 03:01:36.097913'
  - - '151'
    - Metaprogramming Ruby
    - Paolo Perrotta
    - '2010'
    - metaprogramming.jpg
    - 
    - '2013-09-27 03:01:36.10232'
    - '2013-09-27 03:01:36.10232'
  - - '152'
    - RubyMotion
    - 'Clay Allsopp '
    - '2012'
    - rubymotion.jpg
    - 
    - '2013-09-27 03:01:36.1071'
    - '2013-09-27 03:01:36.1071'
  - - '153'
    - The dRuby Book
    - Masatoshi Seki
    - '2012'
    - druby_book.jpg
    - 
    - '2013-09-27 03:01:36.156748'
    - '2013-09-27 03:01:36.156748'
  - - '154'
    - Speaking In Style
    - Jason Cranford Teague
    - '2009'
    - speaking_in_style.jpg
    - 
    - '2013-09-27 03:01:36.161911'
    - '2013-09-27 03:01:36.161911'
  - - '155'
    - Search Patterns
    - Peter Morville, Jeffery Callender
    - '2010'
    - search_patterns.jpg
    - 
    - '2013-09-27 03:01:36.16696'
    - '2013-09-27 03:01:36.16696'
  - - '156'
    - AngularJS Web Application Development
    - Peter Bacon Darwin, Pawel Kozlowski
    - '2013'
    - angular_web_development.jpg
    - 
    - '2013-09-27 03:01:36.172289'
    - '2013-09-27 03:01:36.172289'
  - - '157'
    - Apache Solr 3
    - David Smiley, Eric Pugh
    - '2011'
    - apache_solr 3.jpg
    - 
    - '2013-09-27 03:01:36.177018'
    - '2013-09-27 03:01:36.177018'
  - - '158'
    - Apache Solr 4 Cookbook
    - Rafal Kuc
    - '2013'
    - apache_solr 4.jpg
    - 
    - '2013-09-27 03:01:36.182623'
    - '2013-09-27 03:01:36.182623'
  - - '159'
    - CoffeeScript Programming
    - Michael Erasmus
    - '2012'
    - coffeescript_programming_with_jquery_rails_and_node.js.jpg
    - 
    - '2013-09-27 03:01:36.187089'
    - '2013-09-27 03:01:36.187089'

---
posts:
  columns:
  - id
  - name
  - title
  - content
  - created_at
  - updated_at
  records: 
  - - '19'
    - Adam Raouki
    - Tables and How The browser gem came to the Rescue
    - "<p>We all know that Firefox, Opera and IE suck at handling tables. With the
      original css, my table displayed perfectly on Chrome and Safari. On Firefox,
      Opera and IE, the padding in the row where the items were displayed had almost
      tripled, which led to the overflow of 4 and a half items. The table looked terrible,
      to put it mildly. </p>\r\n\r\n<p>After a lot head scratching and after posting
      the question on Stackoveflow, which led to zero relevant feedback, I finally
      got to the bottom of this issue: it was the css as I suspected all along.</p>\r\n\r\n<p>I
      created a special css to handle that table on Firefox, Opera and IE and with
      the help of the browser gem at: <a>https://github.com/fnando/browser</a>, I
      was able to serve that css to these three browsers and the original css to Chrome
      and Safari and that took care of it beautifully. Here is how I did it: </p><br
      />\r\n\r\n<pre>\r\n<% if browser.firefox? || browser.opera? || browser.ie? %>\r\n
      \     &lt;div class='fire-photos'&gt;//css for firefox, opera and IE\r\n<% else
      %> \r\n     &lt;div class='photos'&gt; //css for chrome and safari\r\n<% end
      %>\r\n        &lt;table&gt;\r\n              &lt;tr&gt;\r\n                  &lt;td&gt;\r\n
      \                 &lt;/td&gt;\r\n              &lt;/tr&gt;\r\n        &lt;/table&gt;\r\n
      \   &lt;/div&gt;\r\n</pre>"
    - '2013-10-21 19:28:23.687046'
    - '2013-12-13 17:55:54.405966'
  - - '21'
    - Adam Raouki
    - Metaprogramming, a diet pill for Ruby
    - "<p>In a nutshell, Metaprogramming is the art of writing code to write code
      that runs at runtime, and the repetition is intended here. In Ruby, as in other
      languages, metaprogramming is one way of DRYing your code by refactoring it
      in a way that would weed out all unnecessary repetitions and rewrite your classes
      in a concise, readable and, ideally, elegant manner. Consider the following
      snippet:</p>\r\n\r\n\r\n<p>First, we have a store where our items reside:</p>\r\n\r\n<pre>\r\nclass
      AmazonStore\r\n     def book_info(title, author)\r\n            @title = title\r\n
      \           @author = author\r\n     end\r\n     def movie_info(title, author)\r\n
      \           @title = title\r\n            @author = author\r\n     end\r\n     def
      cd_info(title, author)\r\n             @title = title\r\n             @author
      = author)\r\n     end\r\nend\r\n</pre>\r\n\r\n<p>Here is our first attempt to
      extract those items from the database: </p>\r\n<pre>\r\nclass Purchase\r\n      def
      initialize(title, author, item_info)\r\n           @title = title\r\n           @author
      = author\r\n           @item_info= item_info\r\n       end\r\n\r\n       def
      book_info\r\n          info = @info_item.get_book_info(@title, @author)\r\n
      \         result = \"Book_info: #{info}\"\r\n          result\r\n       end\r\n\r\n
      \      def movie_info\r\n          info = @info_item.get_movie_info(@title,
      @author)\r\n          result = \"Movie_info: #{info}\"\r\n          result\r\n
      \      end\r\n\r\n       def book_info\r\n          info = @info_item.get_cd_info(@title,
      @author)\r\n          result = \"CD_info: #{info}\"\r\n          result\r\n
      \      end\r\nend \r\n</pre>\r\n<p>You’ll notice, right away, a repetitious
      copy and paste that makes the program boring and would require us to test every
      method, and there are quite a few of them if you consider the scope of a store
      like Amazon. Not exactly the best approach.</p>\r\n\r\n<p>There are two ways
      to refactor this program: <br />\r\n1- Using Dynamic methods <br />\r\n2- Using
      method_missing.</p>\r\n\r\n<p> I will use the first one to demonstrate in this
      post and tackle the second in an upcoming one.\r\n</p>\r\n\r\n<p>In Ruby, when
      you call a method, you usually do so by using the dot notation: </p><br />\r\n\r\n<pre>\r\nobj
      = Book.new\r\nobj = some_method()\r\n </pre>\r\n\r\n<p>However, there is another
      way: you can use Object#send(), such as in:</p><br />\r\n\r\n<pre>\r\nobj.send(:some_method)
      \r\n</pre>\r\n\r\n<p>With send(), the method name becomes a simple argument
      that you can call at the last moment, while your program is running, if you
      so choose. This is what is referred to as Dynamic Dispatch in Ruby.</p>\r\n\r\n<p>Based
      on this information, let’s revisit our example and refactor:</p>\r\n\r\n<pre>class
      Purchase\r\n      def initialize(title, author, item_info)\r\n           @title
      = title\r\n           @author = author\r\n           @item_info= item_info\r\n
      \      end\r\n\r\n       def book_info\r\n          data :book_info\r\n       end\r\n\r\n
      \      def movie_info\r\n          data :movie_info\r\n       end\r\n\r\n       def
      cd_info\r\n          data :cd_info\r\n       end\r\n\r\n       def data(name)\r\n
      \          info = @item_info.send \"get_#{name}_info\", @title, @author\r\n
      \              result = \"#{name.to_s}: #{info}\"\r\n               result\r\n
      \      end\r\nend\r\n</pre>\r\n\r\n<p>Calls to, respectively, book_info, movie_info
      and cd_info, are delegated to data(), which triggers calls to AmazonStore#book_info,
      AmazonStore#movie_info and AmazonStore#cd_info.<p>\r\n\r\n\r\n<p>Beside dynamic
      dispatch, you can also generate methods dynamically:</p>\r\n\r\n<pre> class
      Purchase\r\n      def initialize(title, author, item_info)\r\n           @title
      = title\r\n           @author = author\r\n           @item_info= item_info\r\n
      \      end\r\n\r\n       def self.define_data(name)\r\n            define_method(name)
      {\r\n               info = @item_info.send \"get_#{name}_info\", @title, @author\r\n
      \              result = \"#{name.to_s}: #{info}\"\r\n               result\r\n
      \           }\r\n        end\r\n\r\n        define_data :book_info\r\n        define_data
      :movie_info\r\n        define_data :cd_info\r\nend\r\n</pre>\r\n\r\n<p>Notice
      that we call defne_method on self, which happens to be in this case our class
      Purchase. That means that the method is a class method.</p>\r\n\r\n<p>We can
      go even further in our quest to dry up our code even more by refactoring the
      3 define_data methods. But, that will be the subject of another post.</p>\r\n"
    - '2013-11-13 02:11:08.114803'
    - '2013-12-13 17:50:09.560231'
  - - '22'
    - Adam Raouki
    - Steps to migrating from Sqlite to Postgres in Rails
    - "<p>One of the reasons a Rails developer would want to migrate from Rails’ default
      database to Postgres is when he/she plans on deploying their apps to Heroku
      because the latter supports Postgres only.</p>\r\n\r\n<p>When you create a new
      Rails app, SQLite3 gets installed by default, unless you override it before
      you hit the enter button after you typed in the command. Sure, once you have
      created your app, you can still migrate to Postgres by destroying the existing
      database and creating a new one and you can do so safely if you don’t have any
      data stored yet in your database. But, what if you did?</p>\r\n\r\n<p>Well,
      there are a few options out there: notably two gems, Taps and valkyrie, but,
      sometimes, getting them to work in your specific environment could be a daunting
      task that could set you back hours if not days. There is, however, a third option
      that worked for me without any hiccups and here are the steps I took to implement
      it.</p>\r\n\r\n<p>1- Make sure Postgres is installed in your system. Issue the
      following:</p>\r\n\r\n                 <pre> postgres --version</pre><br />\r\n\r\n<p>2-
      Make sure Postgres server is running: issue the following command to see your
      options:</p>\r\n\r\n                  <pre> brew info postgres</pre><br />\r\n\r\n<p>Sample
      output:</p>\r\n\r\n<pre>\r\nTo install gems without sudo, see the Homebrew wiki.\r\n
      \          To have launchd start postgresql at login:\r\n                 ln
      -sfv /Users/adam0964/.rvm/opt/postgresql/*.plist ~/Library/LaunchAgents\r\n
      \         Then to load postgresql now:\r\n               launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist\r\n
      \         Or, if you don't want/need launchctl, you can just run:\r\n               pg_ctl
      -D /Users/adam0964/.rvm/var/postgres -l          /Users/adam0964/.rvm/var/postgres/server.log
      start\r\n </pre><br />\r\n\r\n<p>3- Start Postgres server by typing the following:</p>\r\n
      \   <pre>$ postgres -D /Users/adam0964/.rvm/var/postgres (your machine will
      be different)</pre><br />\r\n\r\n<p>You must admit that this is a long line
      to start the database and if you have to do this regularly, as I suspect it
      might be often the case, this might become a bit annoying. One way to make your
      life a little easier is to alias this command in your .bashrc file, and while
      you’re at it, do the same for the other commands that you tend to use on a regular
      basis. For instance, I put all my Pgsql start, stop, restart, status commands
      in mine:</p>\r\n\r\n<pre>alias pgstr=\"pg_ctl start -W -D /Users/adam0964/.rvm/var/postgres\"\r\nalias
      pgstp=\"pg_ctl stop -W -D /Users/adam0964/.rvm/var/postgres\"\r\nalias pgrst=\"pg_ctl
      restart -W -D /Users/adam0964/.rvm/var/postgres\"\r\nalias pgst=\"pg_ctl status
      -D /Users/adam0964/.rvm/var/postgres\"</pre><br />\r\n\r\n<p>Now, to start PG,
      all I have to do is issue ‘pgstr’ instead of the long line it evaluate to.</p><br
      />\r\n\r\n<p>4- Copy database.yml to database.yml.sql3 by issuing the following:</p>\r\n\r\n
      <pre>cp config/database.yml config/database.yml.sqlite3</pre><br />\r\n\r\n<p>5-
      Add ‘yaml_db’ and ‘pg’ gems to the Gemfile and bundle</p>\r\n<p>6- Add a new
      config/database.yml.pg</p><br />\r\n\r\n<p> Sample file:</p>\r\n\r\n<pre># PG
      9.2\r\n#   gem install postgresql\r\n#\r\n#   Ensure the SQLite 3 gem is defined
      in your Gemfile\r\n#   gem 'postgresql'\r\n\r\ndevelopment:\r\n  adapter: postgresql\r\n
      \ encoding: unicode\r\n  database: kodefuge_development\r\n  pool: 5\r\n  timeout:
      5000\r\n  username: kodefuge\r\n  password:\r\n\r\n# Warning: The database defined
      as \"test\" will be erased and\r\n# re-generated from your development database
      when you run \"rake\".\r\n# Do not set this db to the same as development or
      production.\r\ntest:\r\n  adapter: postgresql\r\n  encoding: unicode\r\n  database:
      kodefuge_test\r\n  pool: 5\r\n  timeout: 5000\r\n  username: adam0964\r\n  password:
      \r\nproduction:\r\n  adapter: postgresql\r\n  encoding: unicode\r\n  database:
      kodefuge_production\r\n  pool: 5\r\n  timeout: 5000\r\n  username: kodefuge\r\n
      \ password: \r\n</pre><br />\r\n\r\n\r\n<p>7- Backup your SQLite data with yaml_db:
      </p>\r\n             <pre>rake db:data:dump</pre><br />\r\n<p>8- Configure Rails
      to use your new PostgreSQL configuration:</p>\r\n             <pre>$ cp config/database.yml.pg
      config/database.yml</pre><br />\r\n<p>9- Create the database and the associated
      tables:</p>\r\n             <pre>$ rake db:create RAILS_ENV=\"production\"</pre><br
      />\r\n<p>10- Load your schema:</p>\r\n             <pre>$ rake db:schema:load
      RAILS_ENV=\"production\"</pre><br />\r\n\r\n<p>Sample output:</p>\r\n\r\n<pre>--
      create_table(\"admins\", {:force=>true})\r\nNOTICE:  CREATE TABLE will create
      implicit sequence \"admins_id_seq\" for serial column \"admins.id\"\r\nNOTICE:
      \ CREATE TABLE / PRIMARY KEY will create implicit index \"admins_pkey\" for
      table \"admins\"\r\n   -> 0.0537s\r\n-- add_index(\"admins\", [\"email\"], {:name=>\"index_admins_on_email\",
      :unique=>true})\r\n   -> 0.0042s\r\n-- add_index(\"admins\", [\"reset_password_token\"],
      {:name=>\"index_admins_on_reset_password_token\", :unique=>true})\r\n   -> 0.0026s\r\n--
      create_table(\"books\", {:force=>true})\r\nNOTICE:  CREATE TABLE will create
      implicit sequence \"books_id_seq\" for serial column \"books.id\"\r\nNOTICE:
      \ CREATE TABLE / PRIMARY KEY will create implicit index \"books_pkey\" for table
      \"books\"\r\n   -> 0.0034s\r\n-- create_table(\"comments\", {:force=>true})\r\nNOTICE:
      \ CREATE TABLE will create implicit sequence \"comments_id_seq\" for serial
      column \"comments.id\"\r\nNOTICE:  CREATE TABLE / PRIMARY KEY will create implicit
      index \"comments_pkey\" for table \"comments\"\r\n   -> 0.0047s\r\n-- add_index(\"comments\",
      [\"post_id\"], {:name=>\"index_comments_on_post_id\"})\r\n   -> 0.0026s\r\n--
      create_table(\"posts\", {:force=>true})\r\n </pre><br />\r\n\r\n<p>11- Load
      your data with yaml_db:</p>\r\n               <pre>$ rake db:data:load RAILS_ENV=\"production\"</pre><br
      />\r\n\r\n<p>12- Sample output:\r\n\r\n<pre>- -- create_table(\"admins\", {:force=>true})\r\nNOTICE:
      \ CREATE TABLE will create implicit sequence \"admins_id_seq\" for serial column
      \"admins.id\"\r\nNOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index
      \"admins_pkey\" for table \"admins\"\r\n   -> 0.0152s\r\n-- add_index(\"admins\",
      [\"email\"], {:name=>\"index_admins_on_email\", :unique=>true})\r\n   -> 0.0040s</pre><br
      />\r\n\r\n<p><strong>Issues that might arise during this process:</strong></p>\r\n\r\n
      \          <pre>could not connect to server: No such file or directory\r\n           Is
      the server running locally and accepting\r\n           connections on Unix domain
      socket \"/var/pgsql_socket/.s.PGSQL.5432\"?</pre></br />\r\n      \r\n<p>Solution:</p>\r\n
      \       <pre> gem pristine pg</pre><br />\r\n\r\n<p>Sample output:</p>\r\n<pre>new-host-3:kodefuge
      adam0964$ gem pristine pg\r\nRestoring gems to pristine condition...\r\nBuilding
      native extensions with: ''\r\nThis could take a while...\r\nRestored pg-0.12.2\r\nBuilding
      native extensions with: ''\r\nThis could take a while...\r\nRestored pg-0.15.1</pre><br
      />\r\n         \r\n<p>Some people claim that uninstalling the ‘pg’ gem  and
      installing it again did the trick for them. You may wanna try it if this doesn’t
      work.</p>\r\n\r\n<p>Issue the following at the command:</p>\r\n           <pre>find
      / -name .s.PGSQL.5432 -ls 2> /dev/null</pre><br />\r\n\r\n <p>You’ll get a similar
      output:</p>\r\n\r\n          <pre>19649420        0 srwxrwxrwx    1 adam0964
      \  wheel  0 Jun 25 19:19           /private/tmp/.s.PGSQL.5432</pre><br />\r\n\r\n<p>You
      then create a symlink to point to where your postgres is:</p>\r\n\r\n          <pre>sudo
      ln -s /private/tmp/.s.PGSQL.5432 /var/run/postgresql/.s.PGSQL.5432</pre><br
      />\r\n\r\n<p>There you have it, the last option was pretty straightforward and
      I hope this can be of some use to someone out there.</p>\r\n\r\n<p>Links that
      helped with the migration:</p>\r\n\r\n<ul> 1- <a href=\"http://stackoverflow.com/questions/1670154/convert-a-ruby-on-rails-app-from-sqlite-to-mysql\"
      target=\"_blank\">StackOverflow</a></ul>\r\n<ul> 2- <a href=\"http://stackoverflow.com/questions/7975556/how-to-start-postgresql-server-on-mac-os-x\"
      target=\"_blank\">StackOverflow</a></ul>\r\n<ul> 3- <a href=\"http://stackoverflow.com/questions/8465508/can-not-connect-to-local-postgresql\"
      target=\"_blank\">StackOverflow</a><br /></ul>\r\n\r\n<p>Other useful links:</p>\r\n\r\n<ul>
      1- <a href=\"https://github.com/ddollar/valkyrie\" target=\"_blank\">valkyrie</a></ul>\r\n<ul>
      2- <a href=\"https://github.com/ricardochimal/taps\" target=\"_blank\">taps</a>
      </ul>\r\n<ul> 3- <a href=\"http://railscasts.com/episodes/342-migrating-to-postgresql\"
      target=\"_blank\">Railscats # 342</a> </ul><br />\r\n"
    - '2013-12-02 04:43:01.058341'
    - '2013-12-09 18:08:34.352889'
  - - '23'
    - Adam Raouki
    - Saving without Committing in Github
    - "<p>It’s 4PM on Friday, you’ve been working on the current project for a few
      weeks and the deadline is near by and all of sudden, a bug pops up and slows
      things down. You decide to take care of it right away and get so deeply involved
      that you realize, an hour later, that you lost track of time and space, for
      it is almost 5PM and it’s time to leave if you don’t want to miss your kid’s
      birthday, like you did last time. You can’t commit your changes because you
      haven’t had time to find and fix the bug yet. So, what do you do?</p>\r\n\r\n<p>Assuming
      you are working on your branch, as you should, and not your master, you can
      save your work without having to commit any changes by issuing a stash command:\r\n
      </p>\r\n\r\n<pre>$ git stash </pre>\r\n\r\n<p>If you don’t specify the name
      of the stash, Git assumes that you meant the current one, otherwise, if you
      target another stash, you have to tell git.</p>\r\n\r\n<p>Let’s call the project
      you’ve been working on: messy_project. At this point, if you check the status
      of your master, you realize that your branch master is still unchanged:</p>\r\n\t\r\n<pre>#
      show the status of master after the stash \r\n$ git status\r\n\t\r\n# output:\r\n#
      On branch master\r\nnothing to commit (working directory clean)</pre>\r\n<p>And
      to see the list of stashes you have on your system, issue the following:\t</p>\r\n\r\n<pre>#
      show the list of the stashes available\r\n$ git stash list:\r\n\r\n# output:\t\t\t
      \   \r\n# stash@{0}: WIP on master: 049d078 added the index file (for  instance)\r\n</pre>\r\n\r\n<p>Everything
      looks great. So, off you go.</p>\r\n\r\n<p>The next day, you get on your laptop,
      spend some time working on the issue and you finally fix the bug and you want
      to commit the new changes to you branch master. First, you need to apply the
      stash by issuing the following:</p><br />\t\r\n\t    \r\n<pre># apply the stash
      \            \r\n$ git stash apply\r\n\r\n# output:\t\t\t\r\n# On branch master\r\n#
      Changes not staged for commit:\r\n#   (use \"git add <file>...\" to update what
      will be committed)\r\n#\r\n#      modified:   index.html (for example)\r\n#
      \     modified:   lib/simplegit.rb\r\n#\r\n</pre><br />\r\n\r\n<p>And this:</p>\r\n<pre>#
      reapply the staged changes\r\n$ git stash apply --index\r\n\t        \r\n# output:\t\r\n#
      On branch master\r\n# Changes to be committed:\r\n#   (use \"git reset HEAD
      <file>...\" to unstage)\r\n#\r\n#      modified:   index.html\r\n#\r\n# Changes
      not staged for commit:\r\n#   (use \"git add <file>...\" to update what will
      be committed)\r\n#\r\n#      modified:   lib/simplegit.rb\r\n#</pre><br />\r\n\r\n
      <p>If you issue the following, you’ll see that the first file has been added:</p>\r\n\r\n<pre>#
      get the stash list\r\n$ git stash list\r\n\t\r\n# output:\r\nstash@{0}: WIP
      on master: 049d078 added the index file\r\n</pre><br />\r\n\r\n<p>The apply
      option only applies the stashed work. Should you feel the need to remove all
      that work, issue the following:</p>\r\n\r\n<pre># remove stash\r\n$ git stash
      drop\r\n \r\n# output:                 \r\nDropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)\r\n</pre><br
      />\r\n\r\n<p>\"In some use case scenarios you might want to apply stashed changes,
      do some work, but then un-apply those changes that originally came \r\nfrom
      the stash. Git does not provide such a stash unapply command, but it is possible
      to achieve the effect by simply retrieving the patch \r\nassociated with a stash
      and applying it in reverse:\"</p>\r\n\r\n<pre># unapply changes on the last
      stash\r\n$ git stash show -p | git apply -R\r\n</pre><br />\r\n\r\n<p>One way
      to simplify things is to create an alias to a stash-unapply and add it to your
      git config file:</p>\r\n\r\n<pre># add a stash-unapply command to git\r\n$ git
      config --global alias.stash-unapply '!git stash show -p | git apply -R'\r\n</pre><br
      />\r\n\t\t\r\n<p>And then, issue:</p>\r\n\t\t\r\n<pre>$ git stash\r\n\r\n# output:\r\n#...
      still working on messy_project</pre><br />\t\t\t\t\t\r\n\t\t\t\t\t\r\n<p>If
      you stash some work, leave it there for a while and continue on the branch you
      stashed your work from, you will get a merge conflict because you're trying
      to apply changes to a file that has already been modified. In that case, if
      you create a new branch by issuing the following, this will check your last
      commit when you last stashed your work, reapply your work on that branch and,
      if the operation is successful, drop the stash.\r\n</p>\r\n\r\n<pre># create
      a branch from stash\r\n$ git stash branch messy_project2\r\n\t\t\t\t\t\r\n#
      output:\r\nSwitched to a new branch \"messy_project2\r\n# On branch messy_project2\r\n#
      Changes to be committed:\r\n#  (use \"git reset HEAD <file>...\" to unstage)\r\n#\r\n#
      \     modified:   index.html\r\n#\r\n# Changes not staged for commit:\r\n#   (use
      \"git add <file>...\" to update what will be committed)\r\n#\r\n#      modified:
      \  lib/simplegit.rb\r\n#</pre>\r\n\r\n"
    - '2013-12-09 00:55:49.770007'
    - '2014-01-10 17:02:27.825948'
  - - '26'
    - Adam Raouki
    - Building a Rails Contact Form
    - "<p>Creating a contact form for a Rails app may seem simple, but, there are
      quite a few steps involved in that process. Following is an example explaining
      the latter. In our form, the user would enter a name, an email address and select
      from a drop down menu what device was used to send the message, and then type
      in a message and submit. Once submitted, the message should be relayed to an
      SMTP server like Google Gmail or Yahoo mail.</p><br />\r\n\r\n\r\n<font size='4'
      color='navy'>Create the App</font><br /><br />\r\n\r\n1- Install rails:<br ><br
      />\r\n    <pre>gem install rails</pre> <br />\r\n\r\n2- Create a new rails app:<br
      /><br />\r\n    <pre>Rails new contact_form –database=postgresql –skip-test-unit
      && cd contact_form</pre><br />\r\n\r\n<p>The database flag allows us to bypass
      rails default database ‘sqlite’ and install Postgresql because we are going
      to deploy to heroku and we’re skipping the Test-unit because we’re going to
      use RSpec instead. </p><br />\r\n\r\n3- Add the necessary gems to the Gemfile
      and bundle:<br /><br />\r\n   <pre><br />\r\n       gem 'simple_form', '~> 3.0.0.rc'\r\n
      \      gem 'bootstrap-sass', '~> 2.3.2.0'\r\n       gem 'haml-rails', '~> 0.4.0\r\n\r\n
      \      # Development Guard\r\n       group :development do \r\n          gem
      'guard-rails'\r\n          gem 'guard-livereload'\r\n          gem 'rack-livereload'\r\n
      \         gem 'guard-bundler'\r\n       end\r\n  </pre><br />\r\n\r\n<p> * guard
      is good at automating a lot of stuff. See the gem’s docs on <a href=\"https://github.com/guard/guard\"
      target=\"_blank\"><font color='blue'>github</font></a> and check out also these
      resources: <a href=\"http://railscasts.com/episodes/264-guard\" target=\"_blank\"><font
      color='blue'>railscasts</font></a>, <a href=\"http://net.tutsplus.com/tutorials/tools-and-tips/guard-is-your-best-friend/\"
      target=\"_blank\"><font color='blue'>nettuts</font></a></p><br />\r\n\r\n<font
      size='4' color='navy'>Set up guard and start the server:</font><br /><br />\r\n\r\n1-
      Add a guard definition to your Guardfile with:<br /><br />\r\n\r\n    <pre>bundle
      exec guard init rails livereload</pre><br />\r\n\r\n2- Start the rails server
      and livereload by running Guard through Bundler (to avoid getting errors) with:<br
      /><br />\r\n   <pre>bundle exec guard</pre><br />\r\n\r\n<font size='4' color='navy'>Create
      a pages controller</font><br /><br />\r\n\r\n1- Create a controller with one
      page called index:<br /><br />\r\n\r\n  <pre>Rails g controller pages index</pre><br
      />\r\n\r\n2- Edit the routes file:<br /><br />\r\n\r\n<pre>ContactForm::Application.routes.draw
      do\r\n  root \"pages#index\"</pre><br />\r\n\r\n<p>If you open your browser
      and go to: http://localhost:3000, you should see the following:</p><br />\r\n\r\n<pre>Pages#index\r\nFind
      me in app/views/pages/index.html</pre><br />\r\n\r\n<font size='4' color='navy'>Update
      the Assets folder:</font><br /><br />\r\n + Add Bootstrap to both application
      files:<br /><br />\r\n\r\n <pre> \r\n   *= require ‘bootstrap’\r\n   //= require
      ‘bootstrap’\r\n </pre><br />\r\n\r\n<font size='4' color='navy'>Update the views:</font><br
      /><br />\r\n\r\n1- Install html2haml<br /><br />\r\n <pre>\r\n   gem install
      html2haml\r\n </pre><br />\r\n2- Convert html to haml and remove the .erb file<br
      /><br />\r\n\r\n <pre>\r\n  Html2haml application.html.rb > application.html.haml
      && rm application.html.erb\r\n </pre><br />\r\n\r\n3- Create a partial for the
      header in the layouts folder<br /><br />\r\n\r\n<pre>\r\n.container\r\n  - flash.each
      do |name, msg|\r\n    - if msg.is_a?(String)\r\n      %div{:class => \"alert
      alert-#{name == :notice ? \"success\" : \"error\"}\"}\r\n        %a.close{\"data-dismiss\"
      => \"alert\"}\r\n          &times;\r\n        = content_tag :div, msg, :id =>
      \"flash_#{name}\"\r\n  .navbar.navbar-fixed-top\r\n    .navbar-inner\r\n      .container\r\n
      \       .nav-collapse.collapse\r\n          %ul.nav\r\n            %li\r\n              =
      link_to t('home'), root_url\r\n            %li\r\n              = link_to t('contact'),
      new_contact_path  \r\n</pre><br />\r\n\r\n4- Update the application.html.haml
      by adding the following right after yield:<br /><br />\r\n<pre>\r\n= render
      :partial => 'layouts/header'\r\n</pre><br />\r\n\r\n<font size='4' color='navy'>Create
      the Contact Form:</font><br /><br />\r\n\r\n1- Run the simple_form  generator
      and add bootstrap styling to it:<br ><br />\r\n       \r\n <pre>Rails g simple_form:install
      –bootstrap</pre><br />\r\n\r\n2- Add a contacts controller:<br /><br />\r\n\r\n<pre>Rails
      g controller contacts</pre><br />\r\n\r\n3- Edit the routes file:<br /><br />\r\n
      <pre>Resources ‘contacts’, only [:new, :create]</pre><br />\r\n\r\n4- Edit the
      conatcts_controller.rb file:<br /><br />\r\n\r\n<pre>\r\nclass ContactsController
      < ApplicationController\r\n  def new\r\n    @contact = Contact.new\r\n  end\r\n\r\n
      \ def create\r\n    @contact = Contact.new(params[:contact])\r\n    @contact.request
      = request\r\n    if @contact.deliver\r\n      flash.now[:error]  = nil\r\n      flash.now[:notice]
      = 'Thank you for your message!'\r\n    else\r\n      flash.now[:error]  = Unable
      to send message.'\r\n      render :new\r\n    end\r\n  end\r\nend\r\n</pre><br
      />\r\n\r\n5- Create a contact model:<br /><br />\r\n\r\n<pre>\r\nclass Contact
      < MailForm::Base\r\n  attribute :name,      :validate => true\r\n  attribute
      :email,     :validate => /\\A([\\w\\.%\\+\\-]+)@([\\w\\-]+\\.)+([\\w]{2,})\\z/i\r\n
      \ attribute :message\r\n  attribute :nickname,  :captcha  => true\r\n  attribute
      :contact_method \r\n\r\n  # Declare the e-mail headers. \r\n  def headers\r\n
      \   {\r\n      :subject => \"A new Contact\",\r\n      :to      => \"adam0964@gmail.com\",\r\n
      \     :from    => %(\"#{name}\" <#{email}>)\r\n    }\r\n  end\r\nend\r\n</pre><br
      />\r\n\r\n6- Create views for the form:\r\n\r\n<p>We only need two views, one
      for new and another for create:</p><br />\r\n\r\n<pre>\r\n# new.html.haml\r\n.container\r\n
      \ %h2 Contact\r\n  = simple_form_for @contact, :html => {:class => 'well span10'
      } do |f|\r\n    = f.input :name,  :required => true, :autofocus => true\r\n
      \   = f.input :email, :required => true\r\n    = f.label :contact_method\r\n
      \   = f.select :contact_method, options_for_select([\"Select one\", \"iPhone\",
      \"iPad\", \"Universal\"]), :required => true\r\n    %br\r\n    %br\r\n    =
      f.input :message, :as => :text, :required => false, :input_html => {:id => \"message\",
      :class => \"input-xlarge span7\", :rows => \"10\"}, :maxlength => 300\r\n    =
      f.button :submit, 'Send message', :class => 'btn btn-primary'\r\n</pre><br />\r\n\r\n<pre>\r\n#
      create.html.haml\r\n.container\r\n  %h1 #{@contact.name.split.each{|i| i.capitalize!}.join('
      ')}, Thank you for your message. \r\n  %br\r\n  %p We'll get back to you soon.\r\n</pre><br
      />\r\n\r\n7- Styling is a matter of taste. In addition to bootstrap, I created
      another stylesheet to override certain styles that I didn't like and customize
      the form to my liking:<br /><br />\r\n<pre>\r\nbody {\r\n  padding-top: 45px;\r\n}\r\nh1
      {\r\n\tfont-family: 'Helvetica Light';\r\n\tmargin-top: 50px;\r\n\tmargin-left:
      350px;\r\n}\r\nh2 {\r\n\tfont-family: 'Helvetica Light';\r\n\tmargin-top: 50px;\r\n\tmargin-left:
      470px;\r\n}\r\ninput, select {\r\n\twidth: 520px;\r\n}\r\nselect {\r\n\twidth:
      530px;\r\n}\r\n.nav-collapse {\r\n\tmargin-left: 450px;\r\n}\r\n.container p
      {\r\n\tfont-size: 16px;\r\n\tfont-family: Georgia, Serif;\r\n}\r\ntextarea {\r\n
      \   resize: none;\r\n}\r\n.btn {\r\n\tbackground-color: green;\r\n}\r\n.btn-primary
      {\r\n\twidth: 350px;\r\n\theight: 50px;\r\n\tcolor: white;\r\n\tfont-size: 18px;\r\n\tpadding-right:
      210px;\r\n\tpadding-left:  210px;\r\n}\r\n.well {\r\n\tmargin-left: 250px;\r\n\theight:
      560px;\r\n\twidth: 550px;\r\n\tpadding: 20px;\r\n}\r\n</pre><br />\r\n\r\n8-
      Edit the environment.rb file by adding the following:<br /><br />\r\n\r\n<pre>\r\n#
      environment/development.rb\r\n config.action_mailer.default_url_options = {
      :host => 'localhost:3000' } \r\n config.action_mailer.perform_deliveries = true
      \r\n config.action_mailer.raise_delivery_errors = true\r\n config.action_mailer.delivery_method
      = :smtp\r\n config.action_mailer.smtp_settings = {\r\n address: \"smtp.gmail.com\",\r\n
      port: 587,\r\n domain: \"YOUR DOMAIN NAME\",\r\n authentication: \"plain\",\r\n
      enable_starttls_auto: true,\r\n user_name: \"YOUR GMAIL ADDRESS\",\r\n password:
      \ \"YOUR GMAIL PASSWORD\",\r\n openssl_verify_mode:  'none'\r\n}\r\n</pre><br
      />\r\n\r\n<p>It goes without saying that before you deploy your app to heroku,
      you would need to transfer these settings to your production.rb file.</p><br
      />\r\n\r\n<center>\r\n<a href=\"http://contact-us-form.herokuapp.com/contacts/new\"
      target=\"_blank\">\r\n   <font size='4' color='orange' style=\"text-decoration:none\">\r\n
      \        Click to see what the form looks like live and take it for a spin!!\r\n
      \  </font>\r\n</a>\r\n</center>\r\n<br /><br />\r\n\r\n<center>\r\n       <a
      href=\"https://github.com/Adam0964/contact\" target=\"_blank\">\r\n       <font
      size='3' color='gray' style=\"text-decoration:none\">\r\n         The app is
      on Github\r\n   </font></a>\r\n</center><br ><br />\r\n\r\n"
    - '2014-01-09 00:19:08.726414'
    - '2014-02-02 23:29:30.151187'
  - - '27'
    - Adam Raouki
    - How 2 Rails apps using different versions of Ruby/Rails can coexist on the same  machine.
    - "<p>Suppose that you need to develop simultaneously two rails applications that
      use two different versions of Ruby, Rails, and different sets of gems. How would
      you go about implementing a solution that would allow both applications to coexist
      in your development environment without conflict? </p>\r\n\r\n<p>As per the
      documentation, \"RVM gives you compartmentalized independent ruby setups. This
      means that ruby, gems and irb are all separate and self-contained - from the
      system, and from each other. You may even have separate named gemsets.\"</p><br
      />\r\n\r\n<pre>\r\n# this would be the default, for instance\r\n$ rvm install
      ruby-1.9.3-head\r\n\t\t\t\t\t\r\n# switch to this version\r\n$ rvm 1.9.3-head\r\n\t\t\t\t\t\r\n#
      install rails -v 3.2.13 for this version of ruby - If it’s not already installed\r\n$
      gem install rails -v 3.2.13\r\n\t\t\t\t\t\r\n# create a gemset for this version\r\n$
      rvm gemset create rails3213\r\n\r\n#output\t\t\t\t\t\r\ngemset created rails3213\r\n\t\t\t\t\r\n#
      this one would be for other applications (you can create more than one if you
      wish)\r\n$ rvm install ruby-2.0.0-head\r\n\t\t\t\t\t\r\n# switch to this version
      of ruby\r\n$ rvm 2.0.0-head\r\n\t\t\t\t\t\r\n# install rails -v 4.0.0 for this
      version of ruby\r\n$ gem install rails -v 4.0.0\r\n\t\t\t\t\t\r\n# create a
      gemset for this version\r\n$ rvm gemset create rails400\r\n\r\n#output\t\t\t\t\t\t\r\ngemset
      created rails400\t\r\n\r\nTo switch between versions of ruby and rails:\r\n\t\t\t\t\t\r\n$
      ruby-1.9.3-head@rails3213; rails --version\r\nrails 3.2.13\r\n\t\t\t\t\t\r\n$
      ruby-2.0.0-head@rails400; rails --version\r\nrails 4.00\r\n</pre><br />\r\n\r\n\t\t\t\t\t\t\t\t\t\t\r\n<p>Again,
      as per the documentation, \"RVM gives you a separate gem directory for each
      and every Ruby version and gemset. * This means that gems must be explicitly
      installed \r\nfor each revision and gemset,\" which is exactly what we did.</p><br
      />\r\n\r\n<h3>Upcoming posts:</h3>  \r\n\r\n<li><p>Blocks in Ruby: What are
      they and why should you care? </p></li>   \r\n<li><p>Methods Aliases in Ruby
      </p> </li>\r\n<li><p>ARGF, Splat, Tap & Freeze in Ruby</p></li>\r\n<li><p>Object
      Serialization in Ruby </p></li>\r\n<li><p>Threads, Fibers & Continuations in
      Ruby</p></li>\r\n<li><p>Structs & OpenStructs in Ruby </p></li>\r\n<li><p>Caching
      in Rails 3 the Rails 4 way</p></li>\r\n<li><p>Metaprogramming: A diet pill for
      Ruby Part II</p></li>\t\t\t\t"
    - '2014-02-02 23:24:17.053919'
    - '2014-02-02 23:30:08.290718'

---
users:
  columns:
  - id
  - name
  - created_at
  - updated_at
  - email
  - encrypted_password
  - reset_password_token
  - reset_password_sent_at
  - remember_created_at
  - sign_in_count
  - current_sign_in_at
  - last_sign_in_at
  - current_sign_in_ip
  - last_sign_in_ip
  - admin
  records: 
  - - '1'
    - Chris Savage
    - '2013-09-28 23:47:57.361463'
    - '2013-09-29 00:22:33.915721'
    - csavage@kodefuge.com
    - $2a$10$IFJaLUaq/6OyQnS5cUXbM.hyCxZ9y9GXFUGOlWkHbj3.tfdUTe3GK
    - 
    - 
    - 
    - '2'
    - '2013-09-29 00:22:33.914933'
    - '2013-09-28 23:47:57.462427'
    - 127.0.0.1
    - 127.0.0.1
    - false
