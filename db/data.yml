
---
books:
  columns:
  - id
  - title
  - author
  - pubDate
  - cover
  - description
  - created_at
  - updated_at
  records: 
  - - '92'
    - Agile Web Development With Rails
    - Dave Thomas and David Heinemeier Hansson
    - '2011'
    - agile.jpg
    - 
    - '2013-09-27 03:01:35.350418'
    - '2013-09-27 03:01:35.350418'
  - - '93'
    - Rails 3 in Action
    - Ryan Bigg and Yehuda Katz
    - '2011'
    - rails_3_in_action.jpg
    - 
    - '2013-09-27 03:01:35.701381'
    - '2013-09-27 03:01:35.701381'
  - - '94'
    - Rails Antipatterns
    - Tammer Saleh and Chad Pytel
    - '2010'
    - rails_antipatterns.jpg
    - 
    - '2013-09-27 03:01:35.707874'
    - '2013-09-27 03:01:35.707874'
  - - '95'
    - Rails Recipes
    - Chad Fowler
    - '2012'
    - rails_recipes_3_edition.jpg
    - 
    - '2013-09-27 03:01:35.713836'
    - '2013-09-27 03:01:35.713836'
  - - '96'
    - Rails 3 Way
    - Obie Fernandez
    - '2010'
    - rails3way.jpg
    - 
    - '2013-09-27 03:01:35.719749'
    - '2013-09-27 03:01:35.719749'
  - - '97'
    - Objects On Rails
    - Avdi Grimm
    - '2012'
    - railsobj.jpg
    - 
    - '2013-09-27 03:01:35.726192'
    - '2013-09-27 03:01:35.726192'
  - - '98'
    - Ruby on Rails 3 Tutorial
    - Michael Hart
    - '2012'
    - ruby_on_rails_tutorial_2nd_edition.jpg
    - 
    - '2013-09-27 03:01:35.732228'
    - '2013-09-27 03:01:35.732228'
  - - '99'
    - Programming Ruby
    - Thomas, Chad Fowler, Andy Hunt
    - '2004'
    - ruby.jpg
    - 
    - '2013-09-27 03:01:35.737909'
    - '2013-09-27 03:01:35.737909'
  - - '100'
    - The Rails View
    - John Athayde, Bruce Williams
    - '2012'
    - rails_view.jpg
    - 
    - '2013-09-27 03:01:35.744454'
    - '2013-09-27 03:01:35.744454'
  - - '101'
    - Learning Rails 3
    - Simon St. Laurent, et al
    - '2012'
    - learning_rails_3.jpg
    - 
    - '2013-09-27 03:01:35.750256'
    - '2013-09-27 03:01:35.750256'
  - - '102'
    - Learning Ruby
    - Michael James Fitzgerald
    - '2007'
    - learning_ruby.jpg
    - 
    - '2013-09-27 03:01:35.756477'
    - '2013-09-27 03:01:35.756477'
  - - '103'
    - Crafting Rails Applications
    - Jose Valim
    - '2011'
    - crafting_rails_applications.jpg
    - 
    - '2013-09-27 03:01:35.763303'
    - '2013-09-27 03:01:35.763303'
  - - '104'
    - Crafting Rails 4 Applications
    - Jose Valim
    - '2013'
    - crafting_rails4.jpg
    - 
    - '2013-09-27 03:01:35.769285'
    - '2013-09-27 03:01:35.769285'
  - - '105'
    - Advanced Rails Recipes
    - Mike Clarck
    - '2008'
    - advanced_rails.jpg
    - 
    - '2013-09-27 03:01:35.822412'
    - '2013-09-27 03:01:35.822412'
  - - '106'
    - Rest In Practice
    - Jim Webber, Savas Parastatidis, et al
    - '2010'
    - rest_in_practice.jpg
    - 
    - '2013-09-27 03:01:35.828553'
    - '2013-09-27 03:01:35.828553'
  - - '107'
    - Restful Web Serices
    - Leonard Richardson, Sam Ruby
    - '2007'
    - restful_web_services.jpg
    - 
    - '2013-09-27 03:01:35.834651'
    - '2013-09-27 03:01:35.834651'
  - - '108'
    - The Rspec Book
    - David Chelimsky, Dave Astels, et al
    - '2010'
    - rspec.jpg
    - 
    - '2013-09-27 03:01:35.841432'
    - '2013-09-27 03:01:35.841432'
  - - '109'
    - The Cucumber Book
    - Matt Wynne, Aslak Hellesoy
    - '2012'
    - cucumber_book.jpg
    - 
    - '2013-09-27 03:01:35.847618'
    - '2013-09-27 03:01:35.847618'
  - - '110'
    - Ruby, MongoDB Web Development
    - Gautam Rege
    - '2012'
    - ruby_and_mongodb_web_development.jpg
    - 
    - '2013-09-27 03:01:35.854689'
    - '2013-09-27 03:01:35.854689'
  - - '111'
    - Service Oriented Design With RoR
    - Paul Dix
    - '2010'
    - service_oriented_design.jpg
    - 
    - '2013-09-27 03:01:35.861064'
    - '2013-09-27 03:01:35.861064'
  - - '112'
    - Smashing CSS
    - Eric Meyer
    - '2010'
    - smashing_css.jpg
    - 
    - '2013-09-27 03:01:35.867788'
    - '2013-09-27 03:01:35.867788'
  - - '113'
    - The Book of CSS 3
    - Peter Gasston
    - '2010'
    - the_book_of_css3.jpg
    - 
    - '2013-09-27 03:01:35.881002'
    - '2013-09-27 03:01:35.881002'
  - - '114'
    - Twitter Bootstrap Web Development
    - David Chocran
    - '2012'
    - twitter_bootstrap_web_development_how-to.jpg
    - 
    - '2013-09-27 03:01:35.886979'
    - '2013-09-27 03:01:35.886979'
  - - '115'
    - Typography Best Practices
    - Smashing Magazine
    - '2013'
    - typography.jpg
    - 
    - '2013-09-27 03:01:35.893225'
    - '2013-09-27 03:01:35.893225'
  - - '116'
    - Values, Units and Colors
    - Eric eyer
    - '2012'
    - values_units_and_colors.jpg
    - 
    - '2013-09-27 03:01:35.899454'
    - '2013-09-27 03:01:35.899454'
  - - '117'
    - Web Design For Developers
    - Brian P. Hogan
    - '2010'
    - web_design_for_developers.jpg
    - 
    - '2013-09-27 03:01:35.906523'
    - '2013-09-27 03:01:35.906523'
  - - '118'
    - Building Web Apps With SVG
    - David Dailey, Jon Frost, et al
    - '2012'
    - building_web_applications_with_svg.jpg
    - 
    - '2013-09-27 03:01:35.913075'
    - '2013-09-27 03:01:35.913075'
  - - '119'
    - CSS and Documents
    - Eric Meyer
    - '2012'
    - css_and_documents.jpg
    - 
    - '2013-09-27 03:01:35.918975'
    - '2013-09-27 03:01:35.918975'
  - - '120'
    - Deploying Rails
    - Tom Copeland
    - '2012'
    - deploying_rails.jpg
    - 
    - '2013-09-27 03:01:35.925052'
    - '2013-09-27 03:01:35.925052'
  - - '121'
    - Responsive Web Design
    - Nathan Marcotte
    - '2012'
    - responsive_design1.jpg
    - 
    - '2013-09-27 03:01:35.931047'
    - '2013-09-27 03:01:35.931047'
  - - '122'
    - CSS For Web Designers
    - Dan Cederholm
    - '2010'
    - css_for_web_designers.jpg
    - 
    - '2013-09-27 03:01:35.936815'
    - '2013-09-27 03:01:35.936815'
  - - '123'
    - Elastic Beanstalk
    - Jurg van Vliet, Flavia Paganelli, et al
    - '2011'
    - elastic_beanstalk.jpg
    - 
    - '2013-09-27 03:01:35.943424'
    - '2013-09-27 03:01:35.943424'
  - - '124'
    - Eloquent Ruby
    - Russ Olsen
    - '2011'
    - eloquent_ruby.jpg
    - 
    - '2013-09-27 03:01:35.950777'
    - '2013-09-27 03:01:35.950777'
  - - '125'
    - ember.js App Development How-To
    - Marc Bodmer
    - '2013'
    - ember_application_how_to.jpg
    - 
    - '2013-09-27 03:01:35.95697'
    - '2013-09-27 03:01:35.95697'
  - - '126'
    - ember.js In Action
    - Joachim Haagen Skeie
    - '2013'
    - ember_in_action.jpg
    - 
    - '2013-09-27 03:01:35.976553'
    - '2013-09-27 03:01:35.976553'
  - - '127'
    - Designing For Emotion
    - Aaron Walter
    - '2011'
    - design_for_emotion.jpg
    - 
    - '2013-09-27 03:01:35.982614'
    - '2013-09-27 03:01:35.982614'
  - - '128'
    - Distributed VC With Git
    - Lars Vogel
    - '2013'
    - distributed_git.png
    - 
    - '2013-09-27 03:01:35.987923'
    - '2013-09-27 03:01:35.987923'
  - - '129'
    - Mobile First
    - Luke Wroblewski
    - '2012'
    - mobile_first.jpg
    - 
    - '2013-09-27 03:01:35.99313'
    - '2013-09-27 03:01:35.99313'
  - - '130'
    - 'Git: VC For Everyone'
    - Ravishankar Somasundaram
    - '2013'
    - git_for_everyone.jpg
    - 
    - '2013-09-27 03:01:35.997961'
    - '2013-09-27 03:01:35.997961'
  - - '131'
    - 'HTML and CSS: The Good Parts'
    - Ben Henrick
    - '2010'
    - html__css_the_good_parts.jpg
    - 
    - '2013-09-27 03:01:36.002931'
    - '2013-09-27 03:01:36.002931'
  - - '132'
    - HTML5 For Web Designers
    - Jeremy Keith
    - '2012'
    - html5_for_web_designers.jpg
    - 
    - '2013-09-27 03:01:36.007982'
    - '2013-09-27 03:01:36.007982'
  - - '133'
    - Engineering Software As A Service
    - Armando Fox & David Patterson
    - '2012'
    - saas.jpg
    - 
    - '2013-09-27 03:01:36.012507'
    - '2013-09-27 03:01:36.012507'
  - - '134'
    - HTML Boilerplate
    - Dyvia Manian
    - '2012'
    - html5_boilerplate_web_development.jpg
    - 
    - '2013-09-27 03:01:36.017347'
    - '2013-09-27 03:01:36.017347'
  - - '135'
    - Interactive Data Visualization
    - Scott Murray
    - '2013'
    - interactive_data_visualization_for_the_web.jpg
    - 
    - '2013-09-27 03:01:36.02219'
    - '2013-09-27 03:01:36.02219'
  - - '136'
    - Smashing jQuery
    - Jake Rutter
    - '2011'
    - jquery.jpg
    - 
    - '2013-09-27 03:01:36.028018'
    - '2013-09-27 03:01:36.028018'
  - - '137'
    - JRuby Cookbook
    - Justin Edelson
    - '2008'
    - jruby_cookbook.jpg
    - 
    - '2013-09-27 03:01:36.032843'
    - '2013-09-27 03:01:36.032843'
  - - '138'
    - Lucene In Action
    - Michael McCandless, Erik Hatcher, et al
    - '2010'
    - lucene_in_action_2nd_edition.jpg
    - 
    - '2013-09-27 03:01:36.037558'
    - '2013-09-27 03:01:36.037558'
  - - '139'
    - Mobile Design Pattern Gallery
    - Theresa Neil
    - '2012'
    - mobile_design_pattern_gallery.jpg
    - 
    - '2013-09-27 03:01:36.042338'
    - '2013-09-27 03:01:36.042338'
  - - '140'
    - Multitenency With Rails
    - Ryan Bigg
    - '2013'
    - multitenancy_with_rails.jpg
    - 
    - '2013-09-27 03:01:36.047076'
    - '2013-09-27 03:01:36.047076'
  - - '141'
    - Pro CSS For High Traffic Websites
    - Anthony kennedy
    - '2011'
    - pro_css_for_high_traffic_websites.jpg
    - 
    - '2013-09-27 03:01:36.051528'
    - '2013-09-27 03:01:36.051528'
  - - '142'
    - Pro CSS Animation
    - Dudley Sorey
    - '2012'
    - pro_css3_animation.jpg
    - 
    - '2013-09-27 03:01:36.056295'
    - '2013-09-27 03:01:36.056295'
  - - '143'
    - Professional Design V I
    - Smashing Magazine
    - '2010'
    - professional_design1.jpg
    - 
    - '2013-09-27 03:01:36.061402'
    - '2013-09-27 03:01:36.061402'
  - - '144'
    - Professional Design V II
    - Smashing Magazine
    - '2011'
    - professional_design2.jpg
    - 
    - '2013-09-27 03:01:36.066253'
    - '2013-09-27 03:01:36.066253'
  - - '145'
    - Programming Amazon EC2
    - Jurg van Vliet, Flavia Paganelli
    - '2011'
    - programming_amazon_ec2.jpg
    - 
    - '2013-09-27 03:01:36.071492'
    - '2013-09-27 03:01:36.071492'
  - - '146'
    - Programming The Mobile Web
    - Maximiliano Firtman
    - '2010'
    - programming_the_mobile_web.jpg
    - 
    - '2013-09-27 03:01:36.076663'
    - '2013-09-27 03:01:36.076663'
  - - '147'
    - Designing With Progressive Enhancement
    - Todd Parker, Scott Jehl, et al
    - '2010'
    - design_with_progressive_enhancement.jpg
    - 
    - '2013-09-27 03:01:36.082945'
    - '2013-09-27 03:01:36.082945'
  - - '148'
    - Prototype AND Scriptaculous
    - Andrew Dupont
    - '2008'
    - prototype_and_scriptaculous.jpg
    - 
    - '2013-09-27 03:01:36.08838'
    - '2013-09-27 03:01:36.08838'
  - - '149'
    - Rails 4.0 Guide
    - Stefan Wintermeyer
    - '2013'
    - rails4.jpg
    - 
    - '2013-09-27 03:01:36.09335'
    - '2013-09-27 03:01:36.09335'
  - - '150'
    - Content Strategy For Mobile
    - Karen McGrane
    - '2012'
    - content_strategy_for_mobile.jpg
    - 
    - '2013-09-27 03:01:36.097913'
    - '2013-09-27 03:01:36.097913'
  - - '151'
    - Metaprogramming Ruby
    - Paolo Perrotta
    - '2010'
    - metaprogramming.jpg
    - 
    - '2013-09-27 03:01:36.10232'
    - '2013-09-27 03:01:36.10232'
  - - '152'
    - RubyMotion
    - 'Clay Allsopp '
    - '2012'
    - rubymotion.jpg
    - 
    - '2013-09-27 03:01:36.1071'
    - '2013-09-27 03:01:36.1071'
  - - '153'
    - The dRuby Book
    - Masatoshi Seki
    - '2012'
    - druby_book.jpg
    - 
    - '2013-09-27 03:01:36.156748'
    - '2013-09-27 03:01:36.156748'
  - - '154'
    - Speaking In Style
    - Jason Cranford Teague
    - '2009'
    - speaking_in_style.jpg
    - 
    - '2013-09-27 03:01:36.161911'
    - '2013-09-27 03:01:36.161911'
  - - '155'
    - Search Patterns
    - Peter Morville, Jeffery Callender
    - '2010'
    - search_patterns.jpg
    - 
    - '2013-09-27 03:01:36.16696'
    - '2013-09-27 03:01:36.16696'
  - - '156'
    - AngularJS Web Application Development
    - Peter Bacon Darwin, Pawel Kozlowski
    - '2013'
    - angular_web_development.jpg
    - 
    - '2013-09-27 03:01:36.172289'
    - '2013-09-27 03:01:36.172289'
  - - '157'
    - Apache Solr 3
    - David Smiley, Eric Pugh
    - '2011'
    - apache_solr 3.jpg
    - 
    - '2013-09-27 03:01:36.177018'
    - '2013-09-27 03:01:36.177018'
  - - '158'
    - Apache Solr 4 Cookbook
    - Rafal Kuc
    - '2013'
    - apache_solr 4.jpg
    - 
    - '2013-09-27 03:01:36.182623'
    - '2013-09-27 03:01:36.182623'
  - - '159'
    - CoffeeScript Programming
    - Michael Erasmus
    - '2012'
    - coffeescript_programming_with_jquery_rails_and_node.js.jpg
    - 
    - '2013-09-27 03:01:36.187089'
    - '2013-09-27 03:01:36.187089'

---
posts:
  columns:
  - id
  - name
  - title
  - content
  - created_at
  - updated_at
  records: 
  - - '19'
    - Adam Raouki
    - Tables and Browser compatibility and How Browser gem came to the Rescue
    - "<p>We all know that Firefox, Opera and IE suck at handling tables. With the
      original css, my table displayed perfectly on Chrome and Safari. On Firefox,
      Opera and IE, the padding in the row where the items were displayed had almost
      tripled, which led to the overflow of 4 and a half items. The table looked terrible,
      to put it mildly. </p>\r\n\r\n<p>After a lot head scratching and after posting
      the question on Stackoveflow, which led to zero relevant feedback, I finally
      got to the bottom of this issue: it was the css as I suspected all along.</p>\r\n\r\n<p>I
      created a special css to handle that table on Firefox, Opera and IE and with
      the help of the browser gem at: <a>https://github.com/fnando/browser</a>, I
      was able to serve that css to these three browsers and the original css to Chrome
      and Safari and that took care of it beautifully. Here is how I did it: </p><br
      />\r\n\r\n<pre>\r\n<% if browser.firefox? || browser.opera? || browser.ie? %>\r\n
      \     &lt;div class='fire-photos'&gt;//css for firefox, opera and IE\r\n<% else
      %> \r\n     &lt;div class='photos'&gt; //css for chrome and safari\r\n<% end
      %>\r\n        &lt;table&gt;\r\n              &lt;tr&gt;\r\n                  &lt;td&gt;\r\n
      \                 &lt;/td&gt;\r\n              &lt;/tr&gt;\r\n        &lt;/table&gt;\r\n
      \   &lt;/div&gt;\r\n</pre>"
    - '2013-10-21 19:28:23.687046'
    - '2013-10-21 20:54:05.079618'
  - - '21'
    - Adam Raouki
    - Metaprogramming, a diet pill for Ruby
    - "<p>In a nutshell, Metaprogramming is the art of writing code to write code
      that runs at runtime, and the repetition is intended here. In Ruby, as in other
      languages, metaprogramming is one way of DRYing your code by refactoring it
      in a way that would weed out all unnecessary repetitions and rewrite your classes
      in a concise, readable and, ideally, elegant manner. Consider the following
      snippet:</p>\r\n\r\n\r\n<p>First, we have a store where our items reside:</p>\r\n\r\n<pre>\r\nclass
      AmazonStore\r\n     def get book_info(title, author)\r\n            @title =
      title\r\n            @author = author\r\n     end\r\n     def movie_info(title,
      author)\r\n            @title = title\r\n            @author = author\r\n     end\r\n
      \    def cd_info(title, author)\r\n             @title = title\r\n             @author
      = author)\r\n     end\r\nend\r\n</pre>\r\n\r\n<p>Here is our first attempt to
      extract those items from the database: </p>\r\n<pre>\r\nclass Purchase\r\n      def
      initialize(title, author, item_info)\r\n           @title = title\r\n           @author
      = author\r\n           @item_info= item_info\r\n       end\r\n\r\n       def
      book_info\r\n          info = @info_item.get_book_info(@title, @author)\r\n
      \         result = \"Book_info: #{info}\"\r\n          result\r\n       end\r\n\r\n
      \      def movie_info\r\n          info = @info_item.get_movie_info(@title,
      @author)\r\n          result = \"Movie_info: #{info}\"\r\n          result\r\n
      \      end\r\n\r\n       def book_info\r\n          info = @info_item.get_cd_info(@title,
      @author)\r\n          result = \"CD_info: #{info}\"\r\n          result\r\n
      \      end\r\nend \r\n</pre>\r\n<p>You’ll notice, right away, a repetitious
      copy and paste that makes the program boring and would require us to test every
      method, and there are quite a few of them if you consider the scope of a store
      like Amazon. Not exactly the best approach.</p>\r\n\r\n<p>There are two ways
      to ways to refactor this program: <br />\r\n1- Using Dynamic methods <br />\r\n2-
      Using method_missing.</p>\r\n\r\n<p> I will use the first one to demonstrate
      in this post and tackle the second in an upcoming one.\r\n</p>\r\n\r\n<p>In
      Ruby, when you call a method, you usually do so by using the dot notation: </p><br
      />\r\n\r\n<pre>\r\nobj = Book.new\r\nobj = some_method()\r\n </pre>\r\n\r\n<p>However,
      there is another way: you can use Object#send(), such as in:</p><br />\r\n\r\n<pre>\r\nobj.send(:some_method)
      \r\n</pre>\r\n\r\n<p>With send(), the method name becomes a simple argument
      that you can call at the last moment, while your program is running, if you
      so choose. This is what is referred to as Dynamic Dispatch in Ruby.</p>\r\n\r\n<p>Based
      on this information, let’s revisit our example and refactor:</p>\r\n\r\n<pre>class
      Purchase\r\n      def initialize(title, author, item_info)\r\n           @title
      = title\r\n           @author = author\r\n           @item_info= item_info\r\n
      \      end\r\n\r\n       def book_info\r\n          data :book_info\r\n       end\r\n\r\n
      \      def movie_info\r\n          data :movie_info\r\n       end\r\n\r\n       def
      cd_info\r\n          data :cd_info\r\n       end\r\n\r\n       def data(name)\r\n
      \          info = @item_info.send \"get_#{name}_info\", @title, @author\r\n
      \              result = \"#{name.to_s}: #{info}\"\r\n               result\r\n
      \      end\r\nend\r\n</pre>\r\n\r\n<p>Calls to, respectively, book_info, movie_info
      and cd_info, are delegated to data(), which triggers calls to AmazonStore#book_info,
      AmazonStore#movie_info and AmazonStore#cd_info.<p>\r\n\r\n\r\n<p>Beside dynamic
      dispatch, you can also generate methods dynamically:</p>\r\n\r\n<pre> class
      Purchase\r\n      def initialize(title, author, item_info)\r\n           @title
      = title\r\n           @author = author\r\n           @item_info= item_info\r\n
      \      end\r\n\r\n       def self.define_data(name)\r\n            define_method(name)
      {\r\n               info = @item_info.send \"get_#{name}_info\", @title, @author\r\n
      \              result = \"#{name.to_s}: #{info}\"\r\n               result\r\n
      \           }\r\n        end\r\n\r\n        define_data :book_info\r\n        define_data
      :movie_info\r\n        define_data :cd_info\r\nend\r\n</pre>\r\n\r\n<p>Notice
      that we call defne_method on self, which happens to be in this case our class
      Purchase. That means that the method is a class method.</p>\r\n\r\n<p>We can
      go even further in our quest to dry up our code even more by refactoring the
      3 define_data methods. But, that will be the subject of another post.</p>\r\n"
    - '2013-11-13 02:11:08.114803'
    - '2013-11-16 17:12:28.970435'
  - - '22'
    - Adam Raouki
    - Steps to migrating from Sqlite to Postgres in Rails
    - "<p>One of the reasons a Rails developer would want to migrate from Rails’ default
      database to Postgres is when he/she plans on deploying their apps to Heroku
      because the latter supports Postgres only.</p>\r\n\r\n<p>When you create a new
      Rails app, SQLite3 gets installed by default, unless you override it before
      you hit the enter button after you typed in the command. Sure, once you have
      created your app, you can still migrate to Postgres by destroying the existing
      database and creating a new one and you can do so safely if you don’t have any
      data stored yet in your database. But, what if you did?</p>\r\n\r\n<p>Well,
      there are a few options out there: notably two gems, Taps and valkyrie, but,
      sometimes, getting them to work in your specific environment could be a daunting
      task that could set you back hours if not days. There is, however, a third option
      that worked for me without any hiccups and here are the steps I took to implement
      it.</p>\r\n\r\n<p>1- Make sure Postgres is installed in your system. Issue the
      following:</p>\r\n\r\n                 <pre> postgres --version</pre><br />\r\n\r\n<p>2-
      Make sure Postgres server is running: issue the following command to see your
      options:</p>\r\n\r\n                  <pre> brew info postgres</pre><br />\r\n\r\n<p>Sample
      output:</p>\r\n\r\n<pre>\r\nTo install gems without sudo, see the Homebrew wiki.\r\n
      \          To have launchd start postgresql at login:\r\n                 ln
      -sfv /Users/adam0964/.rvm/opt/postgresql/*.plist ~/Library/LaunchAgents\r\n
      \         Then to load postgresql now:\r\n               launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist\r\n
      \         Or, if you don't want/need launchctl, you can just run:\r\n               pg_ctl
      -D /Users/adam0964/.rvm/var/postgres -l          /Users/adam0964/.rvm/var/postgres/server.log
      start\r\n </pre><br />\r\n\r\n<p>3- Start Postgres server by typing the following:</p>\r\n
      \   <pre>$ postgres -D /Users/adam0964/.rvm/var/postgres (your machine will
      be different)</pre><br />\r\n\r\n<p>You notice that this a long line to start
      the database and if you have to do it regularly, as I suspect might be the case,
      this becomes annoying. One way to make your life a little easier is to alias
      this command in your .bashrc file, and while you’re at it, do the same for other
      commands that you tend to use on a regular basis. For instance, I put all my
      Pgsql start, stop, restart, status commands in mine:</p>\r\n\r\n<pre>alias pgstr=\"pg_ctl
      start -W -D /Users/adam0964/.rvm/var/postgres\"\r\nalias pgstp=\"pg_ctl stop
      -W -D /Users/adam0964/.rvm/var/postgres\"\r\nalias pgrst=\"pg_ctl restart -W
      -D /Users/adam0964/.rvm/var/postgres\"\r\nalias pgst=\"pg_ctl status -D /Users/adam0964/.rvm/var/postgres\"</pre><br
      />\r\n\r\n<p>Now, to start PG, all I have to do is issue ‘pgstr’ instead of
      the long line it evaluate to.</p><br />\r\n\r\n<p>4- Copy database.yml to database.yml..sql3
      by issuing the following:</p>\r\n\r\n <pre>cp config/database.yml config/database.yml.sqlite3</pre><br
      />\r\n\r\n<p>5- Add ‘yaml_db’ and ‘pg’ gems to the Gemfile and bundle</p>\r\n<p>6-
      Add a new config/database.yml.pg</p><br />\r\n\r\n<p> Sample file:</p>\r\n\r\n<pre>#
      PG 9.2\r\n#   gem install postgresql\r\n#\r\n#   Ensure the SQLite 3 gem is
      defined in your Gemfile\r\n#   gem 'postgresql'\r\n\r\ndevelopment:\r\n  adapter:
      postgresql\r\n  encoding: unicode\r\n  database: kodefuge_development\r\n  pool:
      5\r\n  timeout: 5000\r\n  username: kodefuge\r\n  password:\r\n\r\n# Warning:
      The database defined as \"test\" will be erased and\r\n# re-generated from your
      development database when you run \"rake\".\r\n# Do not set this db to the same
      as development or production.\r\ntest:\r\n  adapter: postgresql\r\n  encoding:
      unicode\r\n  database: kodefuge_test\r\n  pool: 5\r\n  timeout: 5000\r\n  username:
      adam0964\r\n  password: \r\nproduction:\r\n  adapter: postgresql\r\n  encoding:
      unicode\r\n  database: kodefuge_production\r\n  pool: 5\r\n  timeout: 5000\r\n
      \ username: kodefuge\r\n  password: \r\n</pre><br />\r\n\r\n\r\n<p>7- Backup
      your SQLite data with yaml_db: </p>\r\n             <pre>rake db:data:dump</pre><br
      />\r\n<p>8- Configure Rails to use your new PostgreSQL configuration:</p>\r\n
      \            <pre>$ cp config/database.yml.pg config/database.yml</pre><br />\r\n<p>9-
      Create the database and the associated tables:</p>\r\n             <pre>$ rake
      db:create RAILS_ENV=\"production\"</pre><br />\r\n<p>10- Load your schema:</p>\r\n
      \            <pre>$ rake db:schema:load RAILS_ENV=\"production\"</pre><br />\r\n\r\n<p>Sample
      output:</p>\r\n\r\n<pre>-- create_table(\"admins\", {:force=>true})\r\nNOTICE:
      \ CREATE TABLE will create implicit sequence \"admins_id_seq\" for serial column
      \"admins.id\"\r\nNOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index
      \"admins_pkey\" for table \"admins\"\r\n   -> 0.0537s\r\n-- add_index(\"admins\",
      [\"email\"], {:name=>\"index_admins_on_email\", :unique=>true})\r\n   -> 0.0042s\r\n--
      add_index(\"admins\", [\"reset_password_token\"], {:name=>\"index_admins_on_reset_password_token\",
      :unique=>true})\r\n   -> 0.0026s\r\n-- create_table(\"books\", {:force=>true})\r\nNOTICE:
      \ CREATE TABLE will create implicit sequence \"books_id_seq\" for serial column
      \"books.id\"\r\nNOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index
      \"books_pkey\" for table \"books\"\r\n   -> 0.0034s\r\n-- create_table(\"comments\",
      {:force=>true})\r\nNOTICE:  CREATE TABLE will create implicit sequence \"comments_id_seq\"
      for serial column \"comments.id\"\r\nNOTICE:  CREATE TABLE / PRIMARY KEY will
      create implicit index \"comments_pkey\" for table \"comments\"\r\n   -> 0.0047s\r\n--
      add_index(\"comments\", [\"post_id\"], {:name=>\"index_comments_on_post_id\"})\r\n
      \  -> 0.0026s\r\n-- create_table(\"posts\", {:force=>true})\r\n </pre><br />\r\n\r\n<p>11-
      Load your data with yaml_db:</p>\r\n               <pre>$ rake db:data:load
      RAILS_ENV=\"production\"</pre><br />\r\n\r\n<p>12- Sample output:\r\n\r\n<pre>-
      -- create_table(\"admins\", {:force=>true})\r\nNOTICE:  CREATE TABLE will create
      implicit sequence \"admins_id_seq\" for serial column \"admins.id\"\r\nNOTICE:
      \ CREATE TABLE / PRIMARY KEY will create implicit index \"admins_pkey\" for
      table \"admins\"\r\n   -> 0.0152s\r\n-- add_index(\"admins\", [\"email\"], {:name=>\"index_admins_on_email\",
      :unique=>true})\r\n   -> 0.0040s</pre><br />\r\n\r\n<p>[strong]Issues that might
      arise during this process:[/strong]</p>\r\n\r\n           <pre>could not connect
      to server: No such file or directory\r\n           Is the server running locally
      and accepting\r\n           connections on Unix domain socket \"/var/pgsql_socket/.s.PGSQL.5432\"?</pre></br
      />\r\n      \r\n[strong]Solution:[/strong]\r\n<p>Issue:</p>\r\n        <pre>
      gem pristine pg</pre><br />\r\n\r\n<p>Sample output:</p>\r\n<pre>new-host-3:kodefuge
      adam0964$ gem pristine pg\r\nRestoring gems to pristine condition...\r\nBuilding
      native extensions with: ''\r\nThis could take a while...\r\nRestored pg-0.12.2\r\nBuilding
      native extensions with: ''\r\nThis could take a while...\r\nRestored pg-0.15.1</pre><br
      />\r\n         \r\n<p>Some people claim that uninstalling the ‘pg’ gem  and
      installing it again did the trick for them. You may wanna try it if this doesn’t
      work.</p>\r\n\r\n<p>Issue the following at the command:</p>\r\n           <pre>find
      / -name .s.PGSQL.5432 -ls 2> /dev/null</pre><br />\r\n\r\n <p>You’ll get a similar
      output:</p>\r\n\r\n          <pre>19649420        0 srwxrwxrwx    1 adam0964
      \  wheel  0 Jun 25 19:19           /private/tmp/.s.PGSQL.5432</pre><br />\r\n\r\n<p>You
      then create a symlink to point to where your postgres is:</p>\r\n\r\n          <pre>sudo
      ln -s /private/tmp/.s.PGSQL.5432 /var/run/postgresql/.s.PGSQL.5432</pre><br
      />\r\n\r\n<p>There you have it, the last option was pretty straightforward and
      I hope this can be of some use to someone out there.</p>\r\n\r\n<p>Links that
      helped with the migration:</p>\r\n\r\n<ul> 1- <a href=\"http://stackoverflow.com/questions/1670154/convert-a-ruby-on-rails-app-from-sqlite-to-mysql\"
      target=\"_blank\">StackOverflow</a></ul>\r\n<ul> 2- <a href=\"http://stackoverflow.com/questions/7975556/how-to-start-postgresql-server-on-mac-os-x\"
      target=\"_blank\">StackOverflow</a></ul>\r\n<ul> 3- <a href=\"http://stackoverflow.com/questions/8465508/can-not-connect-to-local-postgresql\"
      target=\"_blank\">StackOverflow</a><br /></ul>\r\n\r\n<p>Other useful links:</p>\r\n\r\n<ul>
      1- <a href=\"https://github.com/ddollar/valkyrie\" target=\"_blank\">valkyrie</a></ul>\r\n<ul>
      2- <a href=\"https://github.com/ricardochimal/taps\" target=\"_blank\">taps</a>
      </ul>\r\n<ul> 3- <a href=\"http://railscasts.com/episodes/342-migrating-to-postgresql\"
      target=\"_blank\">Railscats # 342</a> </ul><br />\r\n\r\n<h3>Upcoming posts</h3>
      \ \r\n\r\n<li><p>Blocks in Ruby: What are they and why should you care? </p></li>
      \  \r\n<li><p>Methods Aliases </p> </li>\r\n<li><p>ARGF, Splat, Tap & Freeze
      </p></li>\r\n<li><p>Object Serialization in Ruby </p></li>\r\n<li><p>Threads,
      Fibers & Continuations </p></li>\r\n<li><p>Structs & OpenStructs in Ruby </p></li>"
    - '2013-12-02 04:43:01.058341'
    - '2013-12-02 06:59:32.530288'

---
users:
  columns:
  - id
  - name
  - created_at
  - updated_at
  - email
  - encrypted_password
  - reset_password_token
  - reset_password_sent_at
  - remember_created_at
  - sign_in_count
  - current_sign_in_at
  - last_sign_in_at
  - current_sign_in_ip
  - last_sign_in_ip
  - admin
  records: 
  - - '1'
    - Chris Savage
    - '2013-09-28 23:47:57.361463'
    - '2013-09-29 00:22:33.915721'
    - csavage@kodefuge.com
    - $2a$10$IFJaLUaq/6OyQnS5cUXbM.hyCxZ9y9GXFUGOlWkHbj3.tfdUTe3GK
    - 
    - 
    - 
    - '2'
    - '2013-09-29 00:22:33.914933'
    - '2013-09-28 23:47:57.462427'
    - 127.0.0.1
    - 127.0.0.1
    - false
