
---
books:
  columns:
  - id
  - title
  - author
  - pubDate
  - cover
  - description
  - created_at
  - updated_at
  records: 
  - - '92'
    - Agile Web Development With Rails
    - Dave Thomas and David Heinemeier Hansson
    - '2011'
    - agile.jpg
    - 
    - '2013-09-27 03:01:35.350418'
    - '2013-09-27 03:01:35.350418'
  - - '93'
    - Rails 3 in Action
    - Ryan Bigg and Yehuda Katz
    - '2011'
    - rails_3_in_action.jpg
    - 
    - '2013-09-27 03:01:35.701381'
    - '2013-09-27 03:01:35.701381'
  - - '94'
    - Rails Antipatterns
    - Tammer Saleh and Chad Pytel
    - '2010'
    - rails_antipatterns.jpg
    - 
    - '2013-09-27 03:01:35.707874'
    - '2013-09-27 03:01:35.707874'
  - - '95'
    - Rails Recipes
    - Chad Fowler
    - '2012'
    - rails_recipes_3_edition.jpg
    - 
    - '2013-09-27 03:01:35.713836'
    - '2013-09-27 03:01:35.713836'
  - - '96'
    - Rails 3 Way
    - Obie Fernandez
    - '2010'
    - rails3way.jpg
    - 
    - '2013-09-27 03:01:35.719749'
    - '2013-09-27 03:01:35.719749'
  - - '97'
    - Objects On Rails
    - Avdi Grimm
    - '2012'
    - railsobj.jpg
    - 
    - '2013-09-27 03:01:35.726192'
    - '2013-09-27 03:01:35.726192'
  - - '98'
    - Ruby on Rails 3 Tutorial
    - Michael Hart
    - '2012'
    - ruby_on_rails_tutorial_2nd_edition.jpg
    - 
    - '2013-09-27 03:01:35.732228'
    - '2013-09-27 03:01:35.732228'
  - - '99'
    - Programming Ruby
    - Thomas, Chad Fowler, Andy Hunt
    - '2004'
    - ruby.jpg
    - 
    - '2013-09-27 03:01:35.737909'
    - '2013-09-27 03:01:35.737909'
  - - '100'
    - The Rails View
    - John Athayde, Bruce Williams
    - '2012'
    - rails_view.jpg
    - 
    - '2013-09-27 03:01:35.744454'
    - '2013-09-27 03:01:35.744454'
  - - '101'
    - Learning Rails 3
    - Simon St. Laurent, et al
    - '2012'
    - learning_rails_3.jpg
    - 
    - '2013-09-27 03:01:35.750256'
    - '2013-09-27 03:01:35.750256'
  - - '102'
    - Learning Ruby
    - Michael James Fitzgerald
    - '2007'
    - learning_ruby.jpg
    - 
    - '2013-09-27 03:01:35.756477'
    - '2013-09-27 03:01:35.756477'
  - - '103'
    - Crafting Rails Applications
    - Jose Valim
    - '2011'
    - crafting_rails_applications.jpg
    - 
    - '2013-09-27 03:01:35.763303'
    - '2013-09-27 03:01:35.763303'
  - - '104'
    - Crafting Rails 4 Applications
    - Jose Valim
    - '2013'
    - crafting_rails4.jpg
    - 
    - '2013-09-27 03:01:35.769285'
    - '2013-09-27 03:01:35.769285'
  - - '105'
    - Advanced Rails Recipes
    - Mike Clarck
    - '2008'
    - advanced_rails.jpg
    - 
    - '2013-09-27 03:01:35.822412'
    - '2013-09-27 03:01:35.822412'
  - - '106'
    - Rest In Practice
    - Jim Webber, Savas Parastatidis, et al
    - '2010'
    - rest_in_practice.jpg
    - 
    - '2013-09-27 03:01:35.828553'
    - '2013-09-27 03:01:35.828553'
  - - '107'
    - Restful Web Serices
    - Leonard Richardson, Sam Ruby
    - '2007'
    - restful_web_services.jpg
    - 
    - '2013-09-27 03:01:35.834651'
    - '2013-09-27 03:01:35.834651'
  - - '108'
    - The Rspec Book
    - David Chelimsky, Dave Astels, et al
    - '2010'
    - rspec.jpg
    - 
    - '2013-09-27 03:01:35.841432'
    - '2013-09-27 03:01:35.841432'
  - - '109'
    - The Cucumber Book
    - Matt Wynne, Aslak Hellesoy
    - '2012'
    - cucumber_book.jpg
    - 
    - '2013-09-27 03:01:35.847618'
    - '2013-09-27 03:01:35.847618'
  - - '110'
    - Ruby, MongoDB Web Development
    - Gautam Rege
    - '2012'
    - ruby_and_mongodb_web_development.jpg
    - 
    - '2013-09-27 03:01:35.854689'
    - '2013-09-27 03:01:35.854689'
  - - '111'
    - Service Oriented Design With RoR
    - Paul Dix
    - '2010'
    - service_oriented_design.jpg
    - 
    - '2013-09-27 03:01:35.861064'
    - '2013-09-27 03:01:35.861064'
  - - '112'
    - Smashing CSS
    - Eric Meyer
    - '2010'
    - smashing_css.jpg
    - 
    - '2013-09-27 03:01:35.867788'
    - '2013-09-27 03:01:35.867788'
  - - '113'
    - The Book of CSS 3
    - Peter Gasston
    - '2010'
    - the_book_of_css3.jpg
    - 
    - '2013-09-27 03:01:35.881002'
    - '2013-09-27 03:01:35.881002'
  - - '114'
    - Twitter Bootstrap Web Development
    - David Chocran
    - '2012'
    - twitter_bootstrap_web_development_how-to.jpg
    - 
    - '2013-09-27 03:01:35.886979'
    - '2013-09-27 03:01:35.886979'
  - - '115'
    - Typography Best Practices
    - Smashing Magazine
    - '2013'
    - typography.jpg
    - 
    - '2013-09-27 03:01:35.893225'
    - '2013-09-27 03:01:35.893225'
  - - '116'
    - Values, Units and Colors
    - Eric eyer
    - '2012'
    - values_units_and_colors.jpg
    - 
    - '2013-09-27 03:01:35.899454'
    - '2013-09-27 03:01:35.899454'
  - - '117'
    - Web Design For Developers
    - Brian P. Hogan
    - '2010'
    - web_design_for_developers.jpg
    - 
    - '2013-09-27 03:01:35.906523'
    - '2013-09-27 03:01:35.906523'
  - - '118'
    - Building Web Apps With SVG
    - David Dailey, Jon Frost, et al
    - '2012'
    - building_web_applications_with_svg.jpg
    - 
    - '2013-09-27 03:01:35.913075'
    - '2013-09-27 03:01:35.913075'
  - - '119'
    - CSS and Documents
    - Eric Meyer
    - '2012'
    - css_and_documents.jpg
    - 
    - '2013-09-27 03:01:35.918975'
    - '2013-09-27 03:01:35.918975'
  - - '120'
    - Deploying Rails
    - Tom Copeland
    - '2012'
    - deploying_rails.jpg
    - 
    - '2013-09-27 03:01:35.925052'
    - '2013-09-27 03:01:35.925052'
  - - '121'
    - Responsive Web Design
    - Nathan Marcotte
    - '2012'
    - responsive_design1.jpg
    - 
    - '2013-09-27 03:01:35.931047'
    - '2013-09-27 03:01:35.931047'
  - - '122'
    - CSS For Web Designers
    - Dan Cederholm
    - '2010'
    - css_for_web_designers.jpg
    - 
    - '2013-09-27 03:01:35.936815'
    - '2013-09-27 03:01:35.936815'
  - - '123'
    - Elastic Beanstalk
    - Jurg van Vliet, Flavia Paganelli, et al
    - '2011'
    - elastic_beanstalk.jpg
    - 
    - '2013-09-27 03:01:35.943424'
    - '2013-09-27 03:01:35.943424'
  - - '124'
    - Eloquent Ruby
    - Russ Olsen
    - '2011'
    - eloquent_ruby.jpg
    - 
    - '2013-09-27 03:01:35.950777'
    - '2013-09-27 03:01:35.950777'
  - - '125'
    - ember.js App Development How-To
    - Marc Bodmer
    - '2013'
    - ember_application_how_to.jpg
    - 
    - '2013-09-27 03:01:35.95697'
    - '2013-09-27 03:01:35.95697'
  - - '126'
    - ember.js In Action
    - Joachim Haagen Skeie
    - '2013'
    - ember_in_action.jpg
    - 
    - '2013-09-27 03:01:35.976553'
    - '2013-09-27 03:01:35.976553'
  - - '127'
    - Designing For Emotion
    - Aaron Walter
    - '2011'
    - design_for_emotion.jpg
    - 
    - '2013-09-27 03:01:35.982614'
    - '2013-09-27 03:01:35.982614'
  - - '128'
    - Distributed VC With Git
    - Lars Vogel
    - '2013'
    - distributed_git.png
    - 
    - '2013-09-27 03:01:35.987923'
    - '2013-09-27 03:01:35.987923'
  - - '129'
    - Mobile First
    - Luke Wroblewski
    - '2012'
    - mobile_first.jpg
    - 
    - '2013-09-27 03:01:35.99313'
    - '2013-09-27 03:01:35.99313'
  - - '130'
    - ! 'Git: VC For Everyone'
    - Ravishankar Somasundaram
    - '2013'
    - git_for_everyone.jpg
    - 
    - '2013-09-27 03:01:35.997961'
    - '2013-09-27 03:01:35.997961'
  - - '131'
    - ! 'HTML and CSS: The Good Parts'
    - Ben Henrick
    - '2010'
    - html__css_the_good_parts.jpg
    - 
    - '2013-09-27 03:01:36.002931'
    - '2013-09-27 03:01:36.002931'
  - - '132'
    - HTML5 For Web Designers
    - Jeremy Keith
    - '2012'
    - html5_for_web_designers.jpg
    - 
    - '2013-09-27 03:01:36.007982'
    - '2013-09-27 03:01:36.007982'
  - - '133'
    - Engineering Software As A Service
    - Armando Fox & David Patterson
    - '2012'
    - saas.jpg
    - 
    - '2013-09-27 03:01:36.012507'
    - '2013-09-27 03:01:36.012507'
  - - '134'
    - HTML Boilerplate
    - Dyvia Manian
    - '2012'
    - html5_boilerplate_web_development.jpg
    - 
    - '2013-09-27 03:01:36.017347'
    - '2013-09-27 03:01:36.017347'
  - - '135'
    - Interactive Data Visualization
    - Scott Murray
    - '2013'
    - interactive_data_visualization_for_the_web.jpg
    - 
    - '2013-09-27 03:01:36.02219'
    - '2013-09-27 03:01:36.02219'
  - - '136'
    - Smashing jQuery
    - Jake Rutter
    - '2011'
    - jquery.jpg
    - 
    - '2013-09-27 03:01:36.028018'
    - '2013-09-27 03:01:36.028018'
  - - '137'
    - JRuby Cookbook
    - Justin Edelson
    - '2008'
    - jruby_cookbook.jpg
    - 
    - '2013-09-27 03:01:36.032843'
    - '2013-09-27 03:01:36.032843'
  - - '138'
    - Lucene In Action
    - Michael McCandless, Erik Hatcher, et al
    - '2010'
    - lucene_in_action_2nd_edition.jpg
    - 
    - '2013-09-27 03:01:36.037558'
    - '2013-09-27 03:01:36.037558'
  - - '139'
    - Mobile Design Pattern Gallery
    - Theresa Neil
    - '2012'
    - mobile_design_pattern_gallery.jpg
    - 
    - '2013-09-27 03:01:36.042338'
    - '2013-09-27 03:01:36.042338'
  - - '140'
    - Multitenency With Rails
    - Ryan Bigg
    - '2013'
    - multitenancy_with_rails.jpg
    - 
    - '2013-09-27 03:01:36.047076'
    - '2013-09-27 03:01:36.047076'
  - - '141'
    - Pro CSS For High Traffic Websites
    - Anthony kennedy
    - '2011'
    - pro_css_for_high_traffic_websites.jpg
    - 
    - '2013-09-27 03:01:36.051528'
    - '2013-09-27 03:01:36.051528'
  - - '142'
    - Pro CSS Animation
    - Dudley Sorey
    - '2012'
    - pro_css3_animation.jpg
    - 
    - '2013-09-27 03:01:36.056295'
    - '2013-09-27 03:01:36.056295'
  - - '143'
    - Professional Design V I
    - Smashing Magazine
    - '2010'
    - professional_design1.jpg
    - 
    - '2013-09-27 03:01:36.061402'
    - '2013-09-27 03:01:36.061402'
  - - '144'
    - Professional Design V II
    - Smashing Magazine
    - '2011'
    - professional_design2.jpg
    - 
    - '2013-09-27 03:01:36.066253'
    - '2013-09-27 03:01:36.066253'
  - - '145'
    - Programming Amazon EC2
    - Jurg van Vliet, Flavia Paganelli
    - '2011'
    - programming_amazon_ec2.jpg
    - 
    - '2013-09-27 03:01:36.071492'
    - '2013-09-27 03:01:36.071492'
  - - '146'
    - Programming The Mobile Web
    - Maximiliano Firtman
    - '2010'
    - programming_the_mobile_web.jpg
    - 
    - '2013-09-27 03:01:36.076663'
    - '2013-09-27 03:01:36.076663'
  - - '147'
    - Designing With Progressive Enhancement
    - Todd Parker, Scott Jehl, et al
    - '2010'
    - design_with_progressive_enhancement.jpg
    - 
    - '2013-09-27 03:01:36.082945'
    - '2013-09-27 03:01:36.082945'
  - - '148'
    - Prototype AND Scriptaculous
    - Andrew Dupont
    - '2008'
    - prototype_and_scriptaculous.jpg
    - 
    - '2013-09-27 03:01:36.08838'
    - '2013-09-27 03:01:36.08838'
  - - '149'
    - Rails 4.0 Guide
    - Stefan Wintermeyer
    - '2013'
    - rails4.jpg
    - 
    - '2013-09-27 03:01:36.09335'
    - '2013-09-27 03:01:36.09335'
  - - '150'
    - Content Strategy For Mobile
    - Karen McGrane
    - '2012'
    - content_strategy_for_mobile.jpg
    - 
    - '2013-09-27 03:01:36.097913'
    - '2013-09-27 03:01:36.097913'
  - - '151'
    - Metaprogramming Ruby
    - Paolo Perrotta
    - '2010'
    - metaprogramming.jpg
    - 
    - '2013-09-27 03:01:36.10232'
    - '2013-09-27 03:01:36.10232'
  - - '152'
    - RubyMotion
    - ! 'Clay Allsopp '
    - '2012'
    - rubymotion.jpg
    - 
    - '2013-09-27 03:01:36.1071'
    - '2013-09-27 03:01:36.1071'
  - - '153'
    - The dRuby Book
    - Masatoshi Seki
    - '2012'
    - druby_book.jpg
    - 
    - '2013-09-27 03:01:36.156748'
    - '2013-09-27 03:01:36.156748'
  - - '154'
    - Speaking In Style
    - Jason Cranford Teague
    - '2009'
    - speaking_in_style.jpg
    - 
    - '2013-09-27 03:01:36.161911'
    - '2013-09-27 03:01:36.161911'
  - - '155'
    - Search Patterns
    - Peter Morville, Jeffery Callender
    - '2010'
    - search_patterns.jpg
    - 
    - '2013-09-27 03:01:36.16696'
    - '2013-09-27 03:01:36.16696'
  - - '156'
    - AngularJS Web Application Development
    - Peter Bacon Darwin, Pawel Kozlowski
    - '2013'
    - angular_web_development.jpg
    - 
    - '2013-09-27 03:01:36.172289'
    - '2013-09-27 03:01:36.172289'
  - - '157'
    - Apache Solr 3
    - David Smiley, Eric Pugh
    - '2011'
    - apache_solr 3.jpg
    - 
    - '2013-09-27 03:01:36.177018'
    - '2013-09-27 03:01:36.177018'
  - - '158'
    - Apache Solr 4 Cookbook
    - Rafal Kuc
    - '2013'
    - apache_solr 4.jpg
    - 
    - '2013-09-27 03:01:36.182623'
    - '2013-09-27 03:01:36.182623'
  - - '159'
    - CoffeeScript Programming
    - Michael Erasmus
    - '2012'
    - coffeescript_programming_with_jquery_rails_and_node.js.jpg
    - 
    - '2013-09-27 03:01:36.187089'
    - '2013-09-27 03:01:36.187089'

---
posts:
  columns:
  - id
  - name
  - title
  - content
  - created_at
  - updated_at
  records: 
  - - '19'
    - Adam Raouki
    - Tables and Browser compatibility and How Browser gem came to the Rescue
    - ! "<p>We all know that Firefox, Opera and IE suck at handling tables. With the
      original css, my table displayed perfectly on Chrome and Safari. On Firefox,
      Opera and IE, the padding in the row where the items were displayed had almost
      tripled, which led to the overflow of 4 and a half items. The table looked terrible,
      to put it mildly. </p>\r\n\r\n<p>After a lot head scratching and after posting
      the question on Stackoveflow, which led to zero relevant feedback, I finally
      got to the bottom of this issue: it was the css as I suspected all along.</p>\r\n\r\n<p>I
      created a special css to handle that table on Firefox, Opera and IE and with
      the help of the browser gem at: <a>https://github.com/fnando/browser</a>, I
      was able to serve that css to these three browsers and the original css to Chrome
      and Safari and that took care of it beautifully. Here is how I did it: </p><br
      />\r\n\r\n<pre>\r\n<% if browser.firefox? || browser.opera? || browser.ie? %>\r\n
      \     &lt;div class='fire-photos'&gt;//css for firefox, opera and IE\r\n<% else
      %> \r\n     &lt;div class='photos'&gt; //css for chrome and safari\r\n<% end
      %>\r\n        &lt;table&gt;\r\n              &lt;tr&gt;\r\n                  &lt;td&gt;\r\n
      \                 &lt;/td&gt;\r\n              &lt;/tr&gt;\r\n        &lt;/table&gt;\r\n
      \   &lt;/div&gt;\r\n</pre>"
    - '2013-10-21 19:28:23.687046'
    - '2013-10-21 20:54:05.079618'
  - - '20'
    - Adam Raouki
    - Expanding Rails routes when a new component is added
    - ! "<p>Our site was working fine until we added a blog. Then, we started having
      some routing issues: Every link on the navbar still works fine, including the
      blog link, which opens the index of of all the posts. When a user clicked on
      one of the links to go to a specific post, the page displayed, as it should.
      But, in order for him/her to make a comment, he/she needs to login or signup.
      So, we put two links on the page. The problem was when he/she clicked on one
      of these links, or any other link on the navbar, he/she got an error message;
      a typical message was as follows:</p><br />\r\n\r\n<pre>Couldn't find Post with
      id=login</pre><br />\r\n\r\n<p>At this point, we were not at the root anymore.
      In this instance, the address bar read:</p><br />\r\n\r\n<pre>http://localhost:3000/posts/login</pre><br
      /><br />\r\n<p>The only way to get to the root is by clicking a ‘Back’ link
      on the page , which takes the user back to the Blog index page.</p>\r\n\r\n<p>This
      is what our routes.rb file looked like:</p><br />\r\n\r\n<pre> \r\nKodefuge::Application.routes.draw
      do \r\n \r\n  devise_for :admins\r\n  devise_for :users, :path => \"auth\",
      :path_names => { \r\n                                                       :sign_in
      => 'login', \r\n                                                       :sign_out
      => 'logout', \r\n                                                       :password
      => 'secret', \r\n                                                       :confirmation
      => 'verification', \r\n                                                       :unlock
      => 'unblock', \r\n                                                       :registration
      => 'register', \r\n                                                       :sign_up
      => 'cmon_let_me_in' \r\n                                                     }\r\n
      devise_for :users, :controllers => {:registrations => 'registrations'}\r\n\r\n
      match '/home',         :to => 'site_pages#home'\r\n match '/about',        :to
      => 'site_pages#about'\r\n match '/bookshelf',    :to => 'books#index'\r\n match
      '/blog',         :to => 'posts#index'\r\n match '/icasts',       :to => 'site_pages#icasts'\r\n
      match '/portfolio',    :to => 'site_pages#portfolio'\r\n\r\n devise_scope :user
      do \r\n   match \"login\",   :to => 'devise/sessions#new'\r\n   match 'logout',
      \ :to => 'devise/sessions#destroy'\r\n   match 'signup',  :to => 'devise/registrations#create'\r\n
      end\r\n\r\n resources :site_pages\r\n resources :books\r\n resources :users\r\n
      resources :posts do\r\n  resources :comments\r\n end\r\n root :to => 'site_pages#home'\r\nend\r\n</pre>\r\n<br
      />\r\n\r\n<p>And here is the solution we came up with:</p>\r\n\r\n<p>As everyone
      knows, Rails routing uses controller#action to specify a route to a page: for
      instance: pages#home</p>\r\n\r\n<p>If you go beyond the boundaries of the controller
      (in this instance ‘pages’), which is the root, to get to another page/link on
      another controller, for example a posts' controller and try to reach a page
      on the ‘pages’ controller, such as in:</p><br />\r\n\r\n    <pre> http://localhost:3000/posts/about</pre>\r\n<p>you’ll
      get an error. That's because the routes.rb does not contain a path to that link
      from where you are, so you have to tell it how to get there. That is exactly
      what we did:</p>\r\n\r\n<p>Here are the routes (untouched) for the site_pages'
      controller:</p><br />\r\n<pre>\r\nmatch '/home',         :to => 'site_pages#home'\r\nmatch
      '/about',        :to => 'site_pages#about'\r\nmatch '/bookshelf',    :to =>
      'books#index'\r\nmatch '/blog',         :to => 'posts#index'\r\nmatch '/icasts',
      \      :to => 'site_pages#icasts'\r\nmatch '/portfolio',    :to => 'site_pages#portfolio'\r\n\r\n#Here
      are the new routes for the posts' controller requested from this controller:
      #http://localhost:3000/posts/[id]/\r\n\r\nmatch \"/posts/home(.:format)\"      =>
      \"site_pages#home\", :as      => :home\r\nmatch \"/posts/about(.:format)\"     =>
      \"site_pages#about\", :as     => :about\r\nmatch \"/posts/bookshelf(.:format)\"
      => \"books#index\", :as          => :bookshelf\r\nmatch \"/posts/blog(.:format)\"
      \     => \"posts#index\",   :as        => :blog\r\nmatch \"/posts/icasts(.:format)\"
      \   => \"site_pages#icasts\", :as    => :icasts\r\nmatch \"/posts/portfolio(.:format)\"
      => \"site_pages#portfolio\",:as  => :portfolio\r\nAnd here are the routes to
      Devise ‘login’, ‘logout’, and ‘signup’ links going from the posts' controller
      (the last 3 lines):\r\n\r\ndevise_scope :user do \r\n  match \"login\",          :to
      \ => 'devise/sessions#new'\r\n  match 'logout',         :to  => 'devise/sessions#destroy'\r\n
      \ match 'signup',         :to  => 'devise/registrations#create'\r\n  match \"/posts/login\",
      \  :to  => \"devise/sessions#new\"\r\n  match \"/posts/logout\",  :to  => \"devise/sessions#destroy\"\r\n
      \ match \"/posts/signup\",  :to  => \"devise/sessions#create\"\r\nend\r\n</pre><br
      />\r\n<p>NB. If Devise links are not wrapped within the Devise scope, Rails
      will return an error.</p>\r\n"
    - '2013-10-21 21:28:37.945548'
    - '2013-10-22 13:46:35.122236'
  - - '21'
    - Adam Raouki
    - Metaprogramming, a diet pill for Ruby
    - ! "<p>In a nutshell, Metaprogramming is the art of writing code to write code
      that runs at runtime, and the repetition is intended here. In Ruby, as in other
      languages, metaprogramming is one way of DRYing your code by refactoring it
      in a way that would weed out all unnecessary repetitions and rewrite your classes
      in a concise, readable and, ideally, elegant manner. Consider the following
      snippets:</p>\r\n\r\n\r\n<p>First, we have a store where our items reside:</p>\r\n\r\n<pre>\r\nclass
      AmazonStore\r\n     def initialize\r\n           #connect to the database\r\n
      \    end\r\n     def get book_info(title, author)\r\n            @title = title\r\n
      \           @author = author\r\n     end\r\n     def movie_info(title, author)\r\n
      \           @title = title\r\n            @author = author\r\n     end\r\n     def
      cd_info(title, author)\r\n             @title = title\r\n             @author
      = author)\r\n     end\r\nend\r\n</pre>\r\n\r\n<p>Here is our first attempt to
      extract those items from the database: </p>\r\n<pre>\r\nclass Purchase\r\n      def
      initialize(title, author, item_info)\r\n           @title = title\r\n           @author
      = author\r\n           @item_info= item_info\r\n       end\r\n\r\n       def
      book_info\r\n          info = @info_item.get_book_info(@title, @author)\r\n
      \         result = \"Book_info: #{info}\"\r\n          result\r\n       end\r\n\r\n
      \      def movie_info\r\n          info = @info_item.get_movie_info(@title,
      @author)\r\n          result = \"Movie_info: #{info}\"\r\n          result\r\n
      \      end\r\n\r\n       def book_info\r\n          info = @info_item.get_cd_info(@title,
      @author)\r\n          result = \"CD_info: #{info}\"\r\n          result\r\n
      \      end\r\nend \r\n</pre>\r\n<p>You’ll notice, right away, a repetitious
      copy and paste pattern that makes the program boring and would require us to test every
      method, and there are quite a few of them. Not exactly the best approach.</p>\r\n\r\n<p>There
      are two ways to refactor this program: Using Dynamic methods and method_missing.
      I will use the first one in this post and tackle the second in an upcoming one.\r\n</p>\r\n\r\n<p>In
      Ruby, when you call a method, you usually do so by using the dot notation: </p><br
      />\r\n\r\n<pre>\r\nobj = Book.new\r\nobj = some_method()\r\n </pre>\r\n\r\n<p>However,
      there is another way: you can use Object#send(), such as in:</p><br />\r\n\r\n<pre>\r\nobj.send(:some_method)
      \r\n</pre>\r\n\r\n<p>With send(), the method name becomes a simple argument
      that you can call at the last moment, while your program is running, if you
      so choose. This is what is referred to as Dynamic Dispatch in Ruby.</p>\r\n\r\n<p>Based
      on this information, let’s revisit our example and refactor:</p>\r\n\r\n<pre>class
      Purchase\r\n      def initialize(title, author, item_info)\r\n           @title
      = title\r\n           @author = author\r\n           @item_info= item_info\r\n
      \      end\r\n\r\n       def book_info\r\n          data :book_info\r\n       end\r\n\r\n
      \      def movie_info\r\n          data :movie_info\r\n       end\r\n\r\n       def
      cd_info\r\n          data :cd_info\r\n       end\r\n\r\n       def data(name)\r\n
      \          info = @item_info.send \"get_#{name}_info\", @title, @author\r\n
      \              result = \"#{name.to_s}: #{info}\"\r\n               result\r\n
      \      end\r\nend\r\n</pre>\r\n\r\n<p>Calls to, respectively, book_info, movie_info
      and cd_info, is delegated to data(), which triggers calls to AmazonStore#book_info,
      AmazonStore#movie_info, AmazonStor#cd_info<p>\r\n\r\n\r\n<p>Beside dynamic dispatch,
      you can also generate methods dynamically:</p>\r\n\r\n<pre> class Purchase\r\n
      \     def initialize(title, author, item_info)\r\n           @title = title\r\n
      \          @author = author\r\n           @item_info= item_info\r\n       end\r\n\r\n
      \      def self.define_data(name)\r\n            define_method(name) {\r\n               info
      = @item_info.send \"get_#{name}_info\", @title, @author\r\n               result
      = \"#{name.to_s}: #{info}\"\r\n               result\r\n            }\r\n        end\r\n\r\n
      \       define_data :book_info\r\n        define_data :movie_info\r\n        define_data
      :cd_info\r\nend\r\n</pre>\r\n\r\n<p>Notice that we call defne_method on self,
      which happens to be in this case our class Purchase. That means that the method
      is a class method.</p>\r\n\r\n<p>We can go even further in our quest to dry
      out our code even more by refactoring the 3 define_data methods. But, that will
      be the subject of another post.</p>\r\n"
    - '2013-11-13 02:11:08.114803'
    - '2013-11-13 02:23:12.910308'

---
users:
  columns:
  - id
  - name
  - created_at
  - updated_at
  - email
  - encrypted_password
  - reset_password_token
  - reset_password_sent_at
  - remember_created_at
  - sign_in_count
  - current_sign_in_at
  - last_sign_in_at
  - current_sign_in_ip
  - last_sign_in_ip
  - admin
  records: 
  - - '1'
    - Chris Savage
    - '2013-09-28 23:47:57.361463'
    - '2013-09-29 00:22:33.915721'
    - csavage@kodefuge.com
    - $2a$10$IFJaLUaq/6OyQnS5cUXbM.hyCxZ9y9GXFUGOlWkHbj3.tfdUTe3GK
    - 
    - 
    - 
    - '2'
    - '2013-09-29 00:22:33.914933'
    - '2013-09-28 23:47:57.462427'
    - 127.0.0.1
    - 127.0.0.1
    - false
